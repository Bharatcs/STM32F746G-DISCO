
sd_ram_write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb0  08007eb0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eb8  08007eb8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ebc  08007ebc  00017ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  20000010  08007ed0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  20000758  08007ed0  00020758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014199  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cd9  00000000  00000000  000341d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  00036eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d38  00000000  00000000  00037d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027404  00000000  00000000  00038aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e9d4  00000000  00000000  0005fea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e85d0  00000000  00000000  0006e878  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a88  00000000  00000000  00156ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007d90 	.word	0x08007d90

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08007d90 	.word	0x08007d90

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800050c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000510:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <SCB_EnableICache+0x3c>)
 8000516:	2200      	movs	r2, #0
 8000518:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800051c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000520:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <SCB_EnableICache+0x3c>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <SCB_EnableICache+0x3c>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000534:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <SCB_EnableDCache+0x7c>)
 8000550:	2200      	movs	r2, #0
 8000552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000556:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <SCB_EnableDCache+0x7c>)
 800055c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000560:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	0b5b      	lsrs	r3, r3, #13
 8000566:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800056a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000574:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	015a      	lsls	r2, r3, #5
 800057a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800057e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000584:	490f      	ldr	r1, [pc, #60]	; (80005c4 <SCB_EnableDCache+0x7c>)
 8000586:	4313      	orrs	r3, r2
 8000588:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	1e5a      	subs	r2, r3, #1
 8000590:	60ba      	str	r2, [r7, #8]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1ef      	bne.n	8000576 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	60fa      	str	r2, [r7, #12]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1e5      	bne.n	800056c <SCB_EnableDCache+0x24>
 80005a0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <SCB_EnableDCache+0x7c>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <SCB_EnableDCache+0x7c>)
 80005aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ae:	6153      	str	r3, [r2, #20]
 80005b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005b4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <main>:
uint32_t SDRAM_BANK_ADDR=0xC0000000;  // SDRAM address



int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0


  MPU_Config();
 80005cc:	f000 feec 	bl	80013a8 <MPU_Config>
  SCB_EnableICache();
 80005d0:	f7ff ff9a 	bl	8000508 <SCB_EnableICache>
  SCB_EnableDCache();
 80005d4:	f7ff ffb8 	bl	8000548 <SCB_EnableDCache>
  HAL_Init();
 80005d8:	f001 f968 	bl	80018ac <HAL_Init>
  SystemClock_Config();
 80005dc:	f000 f8de 	bl	800079c <SystemClock_Config>
  MX_GPIO_Init();
 80005e0:	f000 fad6 	bl	8000b90 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e4:	f000 f990 	bl	8000908 <MX_DMA_Init>
  MX_FMC_Init();
 80005e8:	f000 fa1e 	bl	8000a28 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80005ec:	f000 f96c 	bl	80008c8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005f0:	f004 ff18 	bl	8005424 <MX_FATFS_Init>





  HAL_SDRAM_WriteProtection_Disable(&hsdram1);
 80005f4:	4859      	ldr	r0, [pc, #356]	; (800075c <main+0x194>)
 80005f6:	f004 f885 	bl	8004704 <HAL_SDRAM_WriteProtection_Disable>





  row=1024;
 80005fa:	4b59      	ldr	r3, [pc, #356]	; (8000760 <main+0x198>)
 80005fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000600:	801a      	strh	r2, [r3, #0]
  col=1024;
 8000602:	4b58      	ldr	r3, [pc, #352]	; (8000764 <main+0x19c>)
 8000604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000608:	801a      	strh	r2, [r3, #0]





f_mount(&SDFatFS,(TCHAR *)SDPath,0);
 800060a:	2200      	movs	r2, #0
 800060c:	4956      	ldr	r1, [pc, #344]	; (8000768 <main+0x1a0>)
 800060e:	4857      	ldr	r0, [pc, #348]	; (800076c <main+0x1a4>)
 8000610:	f006 fdd6 	bl	80071c0 <f_mount>

res=f_open(&SDFile,"0:/INPUT.HEX", FA_READ);
 8000614:	2201      	movs	r2, #1
 8000616:	4956      	ldr	r1, [pc, #344]	; (8000770 <main+0x1a8>)
 8000618:	4856      	ldr	r0, [pc, #344]	; (8000774 <main+0x1ac>)
 800061a:	f006 fe17 	bl	800724c <f_open>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b55      	ldr	r3, [pc, #340]	; (8000778 <main+0x1b0>)
 8000624:	701a      	strb	r2, [r3, #0]
if(res!= FR_OK)
 8000626:	4b54      	ldr	r3, [pc, #336]	; (8000778 <main+0x1b0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d000      	beq.n	8000630 <main+0x68>
    while(1);
 800062e:	e7fe      	b.n	800062e <main+0x66>

o=0;
 8000630:	4b52      	ldr	r3, [pc, #328]	; (800077c <main+0x1b4>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
for(i=0;i < row;i++)
 8000636:	4b52      	ldr	r3, [pc, #328]	; (8000780 <main+0x1b8>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	e035      	b.n	80006aa <main+0xe2>
    {   for(j=0; j < col ;j++)
 800063e:	4b51      	ldr	r3, [pc, #324]	; (8000784 <main+0x1bc>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	e025      	b.n	8000692 <main+0xca>
   	       {

   	        res= f_read(&SDFile,&k,sizeof(k),(UINT*)&p);
 8000646:	4b50      	ldr	r3, [pc, #320]	; (8000788 <main+0x1c0>)
 8000648:	2201      	movs	r2, #1
 800064a:	4950      	ldr	r1, [pc, #320]	; (800078c <main+0x1c4>)
 800064c:	4849      	ldr	r0, [pc, #292]	; (8000774 <main+0x1ac>)
 800064e:	f006 ffbb 	bl	80075c8 <f_read>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b48      	ldr	r3, [pc, #288]	; (8000778 <main+0x1b0>)
 8000658:	701a      	strb	r2, [r3, #0]
   	        if((p == 0) || (res!= FR_OK))
 800065a:	4b4b      	ldr	r3, [pc, #300]	; (8000788 <main+0x1c0>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d003      	beq.n	800066a <main+0xa2>
 8000662:	4b45      	ldr	r3, [pc, #276]	; (8000778 <main+0x1b0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d000      	beq.n	800066c <main+0xa4>
   	           while(1);
 800066a:	e7fe      	b.n	800066a <main+0xa2>
   	         (*(__IO uint8_t*) (SDRAM_BANK_ADDR  + o)) = k;
 800066c:	4b48      	ldr	r3, [pc, #288]	; (8000790 <main+0x1c8>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <main+0x1b4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4413      	add	r3, r2
 8000676:	461a      	mov	r2, r3
 8000678:	4b44      	ldr	r3, [pc, #272]	; (800078c <main+0x1c4>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	7013      	strb	r3, [r2, #0]

                o=o+1;
 800067e:	4b3f      	ldr	r3, [pc, #252]	; (800077c <main+0x1b4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a3d      	ldr	r2, [pc, #244]	; (800077c <main+0x1b4>)
 8000686:	6013      	str	r3, [r2, #0]
    {   for(j=0; j < col ;j++)
 8000688:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <main+0x1bc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a3d      	ldr	r2, [pc, #244]	; (8000784 <main+0x1bc>)
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <main+0x19c>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <main+0x1bc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8d2      	bhi.n	8000646 <main+0x7e>
for(i=0;i < row;i++)
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <main+0x1b8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a36      	ldr	r2, [pc, #216]	; (8000780 <main+0x1b8>)
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <main+0x198>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b33      	ldr	r3, [pc, #204]	; (8000780 <main+0x1b8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d8c2      	bhi.n	800063e <main+0x76>
   	        }
         }

f_close(&SDFile);
 80006b8:	482e      	ldr	r0, [pc, #184]	; (8000774 <main+0x1ac>)
 80006ba:	f007 fab7 	bl	8007c2c <f_close>


//create a new file to store result

f_open(&SDFile,"RES.HEX",FA_CREATE_NEW | FA_WRITE);
 80006be:	2206      	movs	r2, #6
 80006c0:	4934      	ldr	r1, [pc, #208]	; (8000794 <main+0x1cc>)
 80006c2:	482c      	ldr	r0, [pc, #176]	; (8000774 <main+0x1ac>)
 80006c4:	f006 fdc2 	bl	800724c <f_open>




n=0;
 80006c8:	4b33      	ldr	r3, [pc, #204]	; (8000798 <main+0x1d0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]

for(i=0;i < row;i++)
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <main+0x1b8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	e031      	b.n	800073a <main+0x172>
   {
      for(j=0; j < col ;j++)
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <main+0x1bc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	e021      	b.n	8000722 <main+0x15a>
       	  {

            k =	(*(__IO uint8_t*) (SDRAM_BANK_ADDR + n)) ;
 80006de:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <main+0x1c8>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <main+0x1d0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <main+0x1c4>)
 80006ee:	701a      	strb	r2, [r3, #0]

                 if(k <100)
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <main+0x1c4>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b63      	cmp	r3, #99	; 0x63
 80006f6:	d802      	bhi.n	80006fe <main+0x136>
                	 k=0;
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <main+0x1c4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
                f_write(&SDFile,k,1,sizeof(k));
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <main+0x1c4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	2301      	movs	r3, #1
 8000706:	2201      	movs	r2, #1
 8000708:	481a      	ldr	r0, [pc, #104]	; (8000774 <main+0x1ac>)
 800070a:	f007 f89c 	bl	8007846 <f_write>

                  n=n+1;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <main+0x1d0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a20      	ldr	r2, [pc, #128]	; (8000798 <main+0x1d0>)
 8000716:	6013      	str	r3, [r2, #0]
      for(j=0; j < col ;j++)
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <main+0x1bc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <main+0x1bc>)
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <main+0x19c>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <main+0x1bc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8d6      	bhi.n	80006de <main+0x116>
for(i=0;i < row;i++)
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <main+0x1b8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <main+0x1b8>)
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <main+0x198>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <main+0x1b8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d8c6      	bhi.n	80006d6 <main+0x10e>

                 }
           }


f_close(&SDFile);
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <main+0x1ac>)
 800074a:	f007 fa6f 	bl	8007c2c <f_close>
f_mount(NULL,(TCHAR *)SDPath,0);
 800074e:	2200      	movs	r2, #0
 8000750:	4905      	ldr	r1, [pc, #20]	; (8000768 <main+0x1a0>)
 8000752:	2000      	movs	r0, #0
 8000754:	f006 fd34 	bl	80071c0 <f_mount>





  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x190>
 800075a:	bf00      	nop
 800075c:	20000254 	.word	0x20000254
 8000760:	200002e8 	.word	0x200002e8
 8000764:	200001ec 	.word	0x200001ec
 8000768:	200002f4 	.word	0x200002f4
 800076c:	20000528 	.word	0x20000528
 8000770:	08007da8 	.word	0x08007da8
 8000774:	200002f8 	.word	0x200002f8
 8000778:	20000250 	.word	0x20000250
 800077c:	200000ec 	.word	0x200000ec
 8000780:	200001e8 	.word	0x200001e8
 8000784:	20000084 	.word	0x20000084
 8000788:	20000080 	.word	0x20000080
 800078c:	20000184 	.word	0x20000184
 8000790:	20000000 	.word	0x20000000
 8000794:	08007db8 	.word	0x08007db8
 8000798:	200000e8 	.word	0x200000e8

0800079c <SystemClock_Config>:




void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b4      	sub	sp, #208	; 0xd0
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 fae8 	bl	8007d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2284      	movs	r2, #132	; 0x84
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 fad9 	bl	8007d80 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80007ce:	f001 ff49 	bl	8002664 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <SystemClock_Config+0x124>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a3a      	ldr	r2, [pc, #232]	; (80008c0 <SystemClock_Config+0x124>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <SystemClock_Config+0x124>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ea:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <SystemClock_Config+0x128>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a35      	ldr	r2, [pc, #212]	; (80008c4 <SystemClock_Config+0x128>)
 80007f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <SystemClock_Config+0x128>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800081e:	2319      	movs	r3, #25
 8000820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000824:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000832:	2308      	movs	r3, #8
 8000834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800083c:	4618      	mov	r0, r3
 800083e:	f001 ff71 	bl	8002724 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000848:	f000 fdd5 	bl	80013f6 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084c:	f001 ff1a 	bl	8002684 <HAL_PWREx_EnableOverDrive>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000856:	f000 fdce 	bl	80013f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800086c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800087c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000880:	2106      	movs	r1, #6
 8000882:	4618      	mov	r0, r3
 8000884:	f002 f9be 	bl	8002c04 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800088e:	f000 fdb2 	bl	80013f6 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000892:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000896:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fb45 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80008b4:	f000 fd9f 	bl	80013f6 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	37d0      	adds	r7, #208	; 0xd0
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_SDMMC1_SD_Init>:


static void MX_SDMMC1_SD_Init(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SDMMC1_SD_Init+0x38>)
 80008ce:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <MX_SDMMC1_SD_Init+0x3c>)
 80008d0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_SDMMC1_SD_Init+0x38>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SDMMC1_SD_Init+0x38>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_SDMMC1_SD_Init+0x38>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SDMMC1_SD_Init+0x38>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <MX_SDMMC1_SD_Init+0x38>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <MX_SDMMC1_SD_Init+0x38>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	200000f0 	.word	0x200000f0
 8000904:	40012c00 	.word	0x40012c00

08000908 <MX_DMA_Init>:


static void MX_DMA_Init(void) 
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800090e:	4b41      	ldr	r3, [pc, #260]	; (8000a14 <MX_DMA_Init+0x10c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <MX_DMA_Init+0x10c>)
 8000914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <MX_DMA_Init+0x10c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000926:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <MX_DMA_Init+0x110>)
 8000928:	4a3c      	ldr	r2, [pc, #240]	; (8000a1c <MX_DMA_Init+0x114>)
 800092a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800092c:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <MX_DMA_Init+0x110>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000932:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <MX_DMA_Init+0x110>)
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000938:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <MX_DMA_Init+0x110>)
 800093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000940:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <MX_DMA_Init+0x110>)
 8000942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000946:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000948:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <MX_DMA_Init+0x110>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800094e:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <MX_DMA_Init+0x110>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000954:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <MX_DMA_Init+0x110>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800095a:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <MX_DMA_Init+0x110>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000960:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <MX_DMA_Init+0x110>)
 8000962:	2204      	movs	r2, #4
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <MX_DMA_Init+0x110>)
 8000968:	2203      	movs	r2, #3
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <MX_DMA_Init+0x110>)
 800096e:	2200      	movs	r2, #0
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000972:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <MX_DMA_Init+0x110>)
 8000974:	2200      	movs	r2, #0
 8000976:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000978:	4827      	ldr	r0, [pc, #156]	; (8000a18 <MX_DMA_Init+0x110>)
 800097a:	f001 f9af 	bl	8001cdc <HAL_DMA_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_DMA_Init+0x80>
  {
    Error_Handler( );
 8000984:	f000 fd37 	bl	80013f6 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_DMA_Init+0x118>)
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <MX_DMA_Init+0x11c>)
 800098c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_DMA_Init+0x118>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_DMA_Init+0x118>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_DMA_Init+0x118>)
 800099c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a0:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_DMA_Init+0x118>)
 80009a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_DMA_Init+0x118>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_DMA_Init+0x118>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_DMA_Init+0x118>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_DMA_Init+0x118>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_DMA_Init+0x118>)
 80009c4:	2204      	movs	r2, #4
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_DMA_Init+0x118>)
 80009ca:	2203      	movs	r2, #3
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_DMA_Init+0x118>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_DMA_Init+0x118>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <MX_DMA_Init+0x118>)
 80009dc:	f001 f97e 	bl	8001cdc <HAL_DMA_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_DMA_Init+0xe2>
  {
    Error_Handler( );
 80009e6:	f000 fd06 	bl	80013f6 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	203b      	movs	r0, #59	; 0x3b
 80009f0:	f001 f8c5 	bl	8001b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009f4:	203b      	movs	r0, #59	; 0x3b
 80009f6:	f001 f8de 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2045      	movs	r0, #69	; 0x45
 8000a00:	f001 f8bd 	bl	8001b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a04:	2045      	movs	r0, #69	; 0x45
 8000a06:	f001 f8d6 	bl	8001bb6 <HAL_NVIC_EnableIRQ>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	20000088 	.word	0x20000088
 8000a1c:	40026410 	.word	0x40026410
 8000a20:	20000188 	.word	0x20000188
 8000a24:	40026428 	.word	0x40026428

08000a28 <MX_FMC_Init>:


static void MX_FMC_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0


  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_FMC_Init+0x94>)
 8000a2e:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <MX_FMC_Init+0x98>)
 8000a30:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_FMC_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_FMC_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_FMC_Init+0x94>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_FMC_Init+0x94>)
 8000a46:	2210      	movs	r2, #16
 8000a48:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_FMC_Init+0x94>)
 8000a4c:	2240      	movs	r2, #64	; 0x40
 8000a4e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_FMC_Init+0x94>)
 8000a52:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a56:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_FMC_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_FMC_Init+0x94>)
 8000a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a64:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_FMC_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_FMC_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_FMC_Init+0x9c>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	601a      	str	r2, [r3, #0]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_FMC_Init+0x9c>)
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	605a      	str	r2, [r3, #4]
  SdramTiming.SelfRefreshTime = 4;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_FMC_Init+0x9c>)
 8000a80:	2204      	movs	r2, #4
 8000a82:	609a      	str	r2, [r3, #8]
  SdramTiming.RowCycleDelay = 6;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_FMC_Init+0x9c>)
 8000a86:	2206      	movs	r2, #6
 8000a88:	60da      	str	r2, [r3, #12]
  SdramTiming.WriteRecoveryTime = 2;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_FMC_Init+0x9c>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	611a      	str	r2, [r3, #16]
  SdramTiming.RPDelay = 2;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_FMC_Init+0x9c>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	615a      	str	r2, [r3, #20]
  SdramTiming.RCDDelay = 2;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_FMC_Init+0x9c>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	619a      	str	r2, [r3, #24]



  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a9c:	4909      	ldr	r1, [pc, #36]	; (8000ac4 <MX_FMC_Init+0x9c>)
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <MX_FMC_Init+0x94>)
 8000aa0:	f003 fdd8 	bl	8004654 <HAL_SDRAM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_FMC_Init+0x86>
   {
     Error_Handler( );
 8000aaa:	f000 fca4 	bl	80013f6 <Error_Handler>
   }

  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000aae:	4906      	ldr	r1, [pc, #24]	; (8000ac8 <MX_FMC_Init+0xa0>)
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <MX_FMC_Init+0x94>)
 8000ab2:	f000 f80b 	bl	8000acc <BSP_SDRAM_Initialization_Sequence>


}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000254 	.word	0x20000254
 8000ac0:	a0000140 	.word	0xa0000140
 8000ac4:	2000002c 	.word	0x2000002c
 8000ac8:	20000174 	.word	0x20000174

08000acc <BSP_SDRAM_Initialization_Sequence>:



static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af6:	6839      	ldr	r1, [r7, #0]
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f003 fe24 	bl	8004746 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 ff40 	bl	8001984 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2202      	movs	r2, #2
 8000b08:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 2;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2202      	movs	r2, #2
 8000b14:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b20:	6839      	ldr	r1, [r7, #0]
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f003 fe0f 	bl	8004746 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2210      	movs	r2, #16
 8000b32:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2208      	movs	r2, #8
 8000b38:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f003 fdfd 	bl	8004746 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000b4c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b50:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2204      	movs	r2, #4
 8000b56:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2210      	movs	r2, #16
 8000b5c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2201      	movs	r2, #1
 8000b62:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f003 fde8 	bl	8004746 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR |= ((uint32_t)((1542)<< 1));
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6959      	ldr	r1, [r3, #20]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000b84:	430b      	orrs	r3, r1
 8000b86:	6153      	str	r3, [r2, #20]

}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <MX_GPIO_Init>:




static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	; 0x40
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba6:	4bad      	ldr	r3, [pc, #692]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4aac      	ldr	r2, [pc, #688]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4baa      	ldr	r3, [pc, #680]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbe:	4ba7      	ldr	r3, [pc, #668]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4aa6      	ldr	r2, [pc, #664]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4ba4      	ldr	r3, [pc, #656]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4ba1      	ldr	r3, [pc, #644]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4aa0      	ldr	r2, [pc, #640]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b9e      	ldr	r3, [pc, #632]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
 8000bec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bee:	4b9b      	ldr	r3, [pc, #620]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a9a      	ldr	r2, [pc, #616]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b98      	ldr	r3, [pc, #608]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b95      	ldr	r3, [pc, #596]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a94      	ldr	r2, [pc, #592]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b92      	ldr	r3, [pc, #584]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b8f      	ldr	r3, [pc, #572]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a8e      	ldr	r2, [pc, #568]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b8c      	ldr	r3, [pc, #560]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c36:	4b89      	ldr	r3, [pc, #548]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a88      	ldr	r2, [pc, #544]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b86      	ldr	r3, [pc, #536]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c4e:	4b83      	ldr	r3, [pc, #524]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a82      	ldr	r2, [pc, #520]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b80      	ldr	r3, [pc, #512]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c66:	4b7d      	ldr	r3, [pc, #500]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a7c      	ldr	r2, [pc, #496]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b7a      	ldr	r3, [pc, #488]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7e:	4b77      	ldr	r3, [pc, #476]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a76      	ldr	r2, [pc, #472]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b74      	ldr	r3, [pc, #464]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	4b71      	ldr	r3, [pc, #452]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a70      	ldr	r2, [pc, #448]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b6e      	ldr	r3, [pc, #440]	; (8000e5c <MX_GPIO_Init+0x2cc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	486b      	ldr	r0, [pc, #428]	; (8000e60 <MX_GPIO_Init+0x2d0>)
 8000cb4:	f001 fcbc 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f241 010c 	movw	r1, #4108	; 0x100c
 8000cbe:	4869      	ldr	r0, [pc, #420]	; (8000e64 <MX_GPIO_Init+0x2d4>)
 8000cc0:	f001 fcb6 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	4867      	ldr	r0, [pc, #412]	; (8000e68 <MX_GPIO_Init+0x2d8>)
 8000cca:	f001 fcb1 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd4:	4865      	ldr	r0, [pc, #404]	; (8000e6c <MX_GPIO_Init+0x2dc>)
 8000cd6:	f001 fcab 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	21c8      	movs	r1, #200	; 0xc8
 8000cde:	4864      	ldr	r0, [pc, #400]	; (8000e70 <MX_GPIO_Init+0x2e0>)
 8000ce0:	f001 fca6 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cf4:	230e      	movs	r3, #14
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	485d      	ldr	r0, [pc, #372]	; (8000e74 <MX_GPIO_Init+0x2e4>)
 8000d00:	f001 fad4 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d04:	2308      	movs	r3, #8
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	4857      	ldr	r0, [pc, #348]	; (8000e74 <MX_GPIO_Init+0x2e4>)
 8000d18:	f001 fac8 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d2c:	2309      	movs	r3, #9
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	484f      	ldr	r0, [pc, #316]	; (8000e74 <MX_GPIO_Init+0x2e4>)
 8000d38:	f001 fab8 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d3c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4e:	230b      	movs	r3, #11
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4845      	ldr	r0, [pc, #276]	; (8000e70 <MX_GPIO_Init+0x2e0>)
 8000d5a:	f001 faa7 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d64:	2312      	movs	r3, #18
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d70:	2304      	movs	r3, #4
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	483f      	ldr	r0, [pc, #252]	; (8000e78 <MX_GPIO_Init+0x2e8>)
 8000d7c:	f001 fa96 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000d80:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d92:	230a      	movs	r3, #10
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4836      	ldr	r0, [pc, #216]	; (8000e78 <MX_GPIO_Init+0x2e8>)
 8000d9e:	f001 fa85 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000da2:	2310      	movs	r3, #16
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000db2:	2302      	movs	r3, #2
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	482e      	ldr	r0, [pc, #184]	; (8000e78 <MX_GPIO_Init+0x2e8>)
 8000dbe:	f001 fa75 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4820      	ldr	r0, [pc, #128]	; (8000e60 <MX_GPIO_Init+0x2d0>)
 8000dde:	f001 fa65 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000df4:	2301      	movs	r3, #1
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481f      	ldr	r0, [pc, #124]	; (8000e7c <MX_GPIO_Init+0x2ec>)
 8000e00:	f001 fa54 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e04:	2360      	movs	r3, #96	; 0x60
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e14:	230d      	movs	r3, #13
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4815      	ldr	r0, [pc, #84]	; (8000e74 <MX_GPIO_Init+0x2e4>)
 8000e20:	f001 fa44 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e34:	2307      	movs	r3, #7
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <MX_GPIO_Init+0x2e8>)
 8000e40:	f001 fa34 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e44:	2340      	movs	r3, #64	; 0x40
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e54:	230a      	movs	r3, #10
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e58:	e012      	b.n	8000e80 <MX_GPIO_Init+0x2f0>
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	40022000 	.word	0x40022000
 8000e68:	40022800 	.word	0x40022800
 8000e6c:	40021c00 	.word	0x40021c00
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	48bc      	ldr	r0, [pc, #752]	; (8001178 <MX_GPIO_Init+0x5e8>)
 8000e88:	f001 fa10 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin 
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin 
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin 
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8000e8c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e9e:	230e      	movs	r3, #14
 8000ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	48b4      	ldr	r0, [pc, #720]	; (800117c <MX_GPIO_Init+0x5ec>)
 8000eaa:	f001 f9ff 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48ae      	ldr	r0, [pc, #696]	; (800117c <MX_GPIO_Init+0x5ec>)
 8000ec4:	f001 f9f2 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000ec8:	2340      	movs	r3, #64	; 0x40
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ecc:	4bac      	ldr	r3, [pc, #688]	; (8001180 <MX_GPIO_Init+0x5f0>)
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed8:	4619      	mov	r1, r3
 8000eda:	48aa      	ldr	r0, [pc, #680]	; (8001184 <MX_GPIO_Init+0x5f4>)
 8000edc:	f001 f9e6 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000ee0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efa:	4619      	mov	r1, r3
 8000efc:	48a2      	ldr	r0, [pc, #648]	; (8001188 <MX_GPIO_Init+0x5f8>)
 8000efe:	f001 f9d5 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000f02:	23f0      	movs	r3, #240	; 0xf0
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f12:	230a      	movs	r3, #10
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	489b      	ldr	r0, [pc, #620]	; (800118c <MX_GPIO_Init+0x5fc>)
 8000f1e:	f001 f9c5 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin 
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8000f22:	23f7      	movs	r3, #247	; 0xf7
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f32:	230e      	movs	r3, #14
 8000f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4894      	ldr	r0, [pc, #592]	; (8001190 <MX_GPIO_Init+0x600>)
 8000f3e:	f001 f9b5 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f54:	2309      	movs	r3, #9
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	488d      	ldr	r0, [pc, #564]	; (8001194 <MX_GPIO_Init+0x604>)
 8000f60:	f001 f9a4 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f76:	230a      	movs	r3, #10
 8000f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4884      	ldr	r0, [pc, #528]	; (8001194 <MX_GPIO_Init+0x604>)
 8000f82:	f001 f993 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f86:	2320      	movs	r3, #32
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4879      	ldr	r0, [pc, #484]	; (8001184 <MX_GPIO_Init+0x5f4>)
 8000f9e:	f001 f985 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fb2:	230d      	movs	r3, #13
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4871      	ldr	r0, [pc, #452]	; (8001184 <MX_GPIO_Init+0x5f4>)
 8000fbe:	f001 f975 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000fc2:	f241 030c 	movw	r3, #4108	; 0x100c
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	486c      	ldr	r0, [pc, #432]	; (800118c <MX_GPIO_Init+0x5fc>)
 8000fdc:	f001 f966 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4868      	ldr	r0, [pc, #416]	; (8001198 <MX_GPIO_Init+0x608>)
 8000ff6:	f001 f959 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000ffa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800100c:	230e      	movs	r3, #14
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	485d      	ldr	r0, [pc, #372]	; (800118c <MX_GPIO_Init+0x5fc>)
 8001018:	f001 f948 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800101c:	2308      	movs	r3, #8
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001030:	4619      	mov	r1, r3
 8001032:	4857      	ldr	r0, [pc, #348]	; (8001190 <MX_GPIO_Init+0x600>)
 8001034:	f001 f93a 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800104a:	230d      	movs	r3, #13
 800104c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001052:	4619      	mov	r1, r3
 8001054:	484f      	ldr	r0, [pc, #316]	; (8001194 <MX_GPIO_Init+0x604>)
 8001056:	f001 f929 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800105a:	2310      	movs	r3, #16
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106a:	4619      	mov	r1, r3
 800106c:	4845      	ldr	r0, [pc, #276]	; (8001184 <MX_GPIO_Init+0x5f4>)
 800106e:	f001 f91d 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001072:	f248 0304 	movw	r3, #32772	; 0x8004
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001084:	4619      	mov	r1, r3
 8001086:	4845      	ldr	r0, [pc, #276]	; (800119c <MX_GPIO_Init+0x60c>)
 8001088:	f001 f910 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800108c:	2302      	movs	r3, #2
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109c:	2305      	movs	r3, #5
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a4:	4619      	mov	r1, r3
 80010a6:	4839      	ldr	r0, [pc, #228]	; (800118c <MX_GPIO_Init+0x5fc>)
 80010a8:	f001 f900 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80010ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c2:	4619      	mov	r1, r3
 80010c4:	4835      	ldr	r0, [pc, #212]	; (800119c <MX_GPIO_Init+0x60c>)
 80010c6:	f001 f8f1 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin 
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80010ca:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010dc:	230d      	movs	r3, #13
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	4619      	mov	r1, r3
 80010e6:	482d      	ldr	r0, [pc, #180]	; (800119c <MX_GPIO_Init+0x60c>)
 80010e8:	f001 f8e0 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010fc:	2302      	movs	r3, #2
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001104:	4619      	mov	r1, r3
 8001106:	4821      	ldr	r0, [pc, #132]	; (800118c <MX_GPIO_Init+0x5fc>)
 8001108:	f001 f8d0 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 800110c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800111e:	2307      	movs	r3, #7
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <MX_GPIO_Init+0x5f8>)
 800112a:	f001 f8bf 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001140:	2301      	movs	r3, #1
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	480f      	ldr	r0, [pc, #60]	; (8001188 <MX_GPIO_Init+0x5f8>)
 800114c:	f001 f8ae 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_GPIO_Init+0x5f0>)
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001162:	4619      	mov	r1, r3
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <MX_GPIO_Init+0x5fc>)
 8001166:	f001 f8a1 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800116a:	23c0      	movs	r3, #192	; 0xc0
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	e014      	b.n	80011a0 <MX_GPIO_Init+0x610>
 8001176:	bf00      	nop
 8001178:	40020400 	.word	0x40020400
 800117c:	40022400 	.word	0x40022400
 8001180:	10120000 	.word	0x10120000
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40020000 	.word	0x40020000
 800118c:	40022000 	.word	0x40022000
 8001190:	40022800 	.word	0x40022800
 8001194:	40021800 	.word	0x40021800
 8001198:	40020800 	.word	0x40020800
 800119c:	40021c00 	.word	0x40021c00
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011a6:	2308      	movs	r3, #8
 80011a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ae:	4619      	mov	r1, r3
 80011b0:	4876      	ldr	r0, [pc, #472]	; (800138c <MX_GPIO_Init+0x7fc>)
 80011b2:	f001 f87b 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011b6:	2310      	movs	r3, #16
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011c6:	230a      	movs	r3, #10
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ce:	4619      	mov	r1, r3
 80011d0:	486f      	ldr	r0, [pc, #444]	; (8001390 <MX_GPIO_Init+0x800>)
 80011d2:	f001 f86b 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80011d6:	23c8      	movs	r3, #200	; 0xc8
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ea:	4619      	mov	r1, r3
 80011ec:	4869      	ldr	r0, [pc, #420]	; (8001394 <MX_GPIO_Init+0x804>)
 80011ee:	f001 f85d 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80011f2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f8:	2303      	movs	r3, #3
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001204:	4619      	mov	r1, r3
 8001206:	4864      	ldr	r0, [pc, #400]	; (8001398 <MX_GPIO_Init+0x808>)
 8001208:	f001 f850 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800120c:	2305      	movs	r3, #5
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800121c:	230a      	movs	r3, #10
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	4859      	ldr	r0, [pc, #356]	; (800138c <MX_GPIO_Init+0x7fc>)
 8001228:	f001 f840 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800122c:	2332      	movs	r3, #50	; 0x32
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800123c:	230b      	movs	r3, #11
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001244:	4619      	mov	r1, r3
 8001246:	4851      	ldr	r0, [pc, #324]	; (800138c <MX_GPIO_Init+0x7fc>)
 8001248:	f001 f830 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800124c:	2304      	movs	r3, #4
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800125c:	2309      	movs	r3, #9
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001264:	4619      	mov	r1, r3
 8001266:	484d      	ldr	r0, [pc, #308]	; (800139c <MX_GPIO_Init+0x80c>)
 8001268:	f001 f820 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800126c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800127e:	2309      	movs	r3, #9
 8001280:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001286:	4619      	mov	r1, r3
 8001288:	4845      	ldr	r0, [pc, #276]	; (80013a0 <MX_GPIO_Init+0x810>)
 800128a:	f001 f80f 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800128e:	2304      	movs	r3, #4
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001292:	2300      	movs	r3, #0
 8001294:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129e:	4619      	mov	r1, r3
 80012a0:	483c      	ldr	r0, [pc, #240]	; (8001394 <MX_GPIO_Init+0x804>)
 80012a2:	f001 f803 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012a6:	2386      	movs	r3, #134	; 0x86
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b6:	230b      	movs	r3, #11
 80012b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012be:	4619      	mov	r1, r3
 80012c0:	4838      	ldr	r0, [pc, #224]	; (80013a4 <MX_GPIO_Init+0x814>)
 80012c2:	f000 fff3 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d6:	4619      	mov	r1, r3
 80012d8:	4832      	ldr	r0, [pc, #200]	; (80013a4 <MX_GPIO_Init+0x814>)
 80012da:	f000 ffe7 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012de:	2350      	movs	r3, #80	; 0x50
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ee:	230d      	movs	r3, #13
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f6:	4619      	mov	r1, r3
 80012f8:	482a      	ldr	r0, [pc, #168]	; (80013a4 <MX_GPIO_Init+0x814>)
 80012fa:	f000 ffd7 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80012fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001304:	2312      	movs	r3, #18
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001308:	2301      	movs	r3, #1
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001310:	2304      	movs	r3, #4
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001318:	4619      	mov	r1, r3
 800131a:	481d      	ldr	r0, [pc, #116]	; (8001390 <MX_GPIO_Init+0x800>)
 800131c:	f000 ffc6 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001320:	2328      	movs	r3, #40	; 0x28
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001330:	230a      	movs	r3, #10
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001338:	4619      	mov	r1, r3
 800133a:	481a      	ldr	r0, [pc, #104]	; (80013a4 <MX_GPIO_Init+0x814>)
 800133c:	f000 ffb6 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001340:	2340      	movs	r3, #64	; 0x40
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001350:	2309      	movs	r3, #9
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_GPIO_Init+0x800>)
 800135c:	f000 ffa6 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001360:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001372:	2305      	movs	r3, #5
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_GPIO_Init+0x80c>)
 800137e:	f000 ff95 	bl	80022ac <HAL_GPIO_Init>

}
 8001382:	bf00      	nop
 8001384:	3740      	adds	r7, #64	; 0x40
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40020800 	.word	0x40020800
 8001390:	40021c00 	.word	0x40021c00
 8001394:	40021800 	.word	0x40021800
 8001398:	40021400 	.word	0x40021400
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40020000 	.word	0x40020000

080013a8 <MPU_Config>:



void MPU_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

	  MPU_Region_InitTypeDef MPU_InitStruct;

	  /* Disable the MPU */
	  HAL_MPU_Disable();
 80013ae:	f000 fc1d 	bl	8001bec <HAL_MPU_Disable>

	  /* Configure the MPU attributes for SDRAM */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	703b      	strb	r3, [r7, #0]
	  MPU_InitStruct.BaseAddress = 0xC0000000;
 80013b6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013ba:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80013bc:	2316      	movs	r3, #22
 80013be:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013c0:	2303      	movs	r3, #3
 80013c2:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.SubRegionDisable = 0x00;
 80013d8:	2300      	movs	r3, #0
 80013da:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	733b      	strb	r3, [r7, #12]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013e0:	463b      	mov	r3, r7
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fc36 	bl	8001c54 <HAL_MPU_ConfigRegion>

	  /* Enable the MPU */
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013e8:	2004      	movs	r0, #4
 80013ea:	f000 fc15 	bl	8001c18 <HAL_MPU_Enable>
	}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <Error_Handler>:


void Error_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_MspInit+0x44>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_MspInit+0x44>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_MspInit+0x44>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_MspInit+0x44>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_MspInit+0x44>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_MspInit+0x44>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a61      	ldr	r2, [pc, #388]	; (80015f0 <HAL_SD_MspInit+0x1a4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	f040 80bb 	bne.w	80015e6 <HAL_SD_MspInit+0x19a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001470:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <HAL_SD_MspInit+0x1a8>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	4a5f      	ldr	r2, [pc, #380]	; (80015f4 <HAL_SD_MspInit+0x1a8>)
 8001476:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800147a:	6453      	str	r3, [r2, #68]	; 0x44
 800147c:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <HAL_SD_MspInit+0x1a8>)
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <HAL_SD_MspInit+0x1a8>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a59      	ldr	r2, [pc, #356]	; (80015f4 <HAL_SD_MspInit+0x1a8>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
 8001494:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <HAL_SD_MspInit+0x1a8>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a0:	4b54      	ldr	r3, [pc, #336]	; (80015f4 <HAL_SD_MspInit+0x1a8>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a53      	ldr	r2, [pc, #332]	; (80015f4 <HAL_SD_MspInit+0x1a8>)
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <HAL_SD_MspInit+0x1a8>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80014b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014ca:	230c      	movs	r3, #12
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4848      	ldr	r0, [pc, #288]	; (80015f8 <HAL_SD_MspInit+0x1ac>)
 80014d6:	f000 fee9 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80014da:	2304      	movs	r3, #4
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014ea:	230c      	movs	r3, #12
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4841      	ldr	r0, [pc, #260]	; (80015fc <HAL_SD_MspInit+0x1b0>)
 80014f6:	f000 fed9 	bl	80022ac <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 80014fc:	4a41      	ldr	r2, [pc, #260]	; (8001604 <HAL_SD_MspInit+0x1b8>)
 80014fe:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 8001502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001506:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001508:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150e:	4b3c      	ldr	r3, [pc, #240]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001514:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 8001516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 800151e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001522:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001524:	4b36      	ldr	r3, [pc, #216]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 8001526:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 800152e:	2220      	movs	r2, #32
 8001530:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001538:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 800153a:	2204      	movs	r2, #4
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 8001540:	2203      	movs	r2, #3
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 8001546:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 800154e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001554:	482a      	ldr	r0, [pc, #168]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 8001556:	f000 fbc1 	bl	8001cdc <HAL_DMA_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8001560:	f7ff ff49 	bl	80013f6 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a26      	ldr	r2, [pc, #152]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c
 800156a:	4a25      	ldr	r2, [pc, #148]	; (8001600 <HAL_SD_MspInit+0x1b4>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 8001572:	4a26      	ldr	r2, [pc, #152]	; (800160c <HAL_SD_MspInit+0x1c0>)
 8001574:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 8001578:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800157c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 8001580:	2240      	movs	r2, #64	; 0x40
 8001582:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 800158c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001590:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 8001594:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001598:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 800159c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 80015a4:	2220      	movs	r2, #32
 80015a6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 80015b0:	2204      	movs	r2, #4
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 80015b6:	2203      	movs	r2, #3
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 80015bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 80015c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80015ca:	480f      	ldr	r0, [pc, #60]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 80015cc:	f000 fb86 	bl	8001cdc <HAL_DMA_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80015d6:	f7ff ff0e 	bl	80013f6 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <HAL_SD_MspInit+0x1bc>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40012c00 	.word	0x40012c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	200001f0 	.word	0x200001f0
 8001604:	40026458 	.word	0x40026458
 8001608:	20000288 	.word	0x20000288
 800160c:	400264a0 	.word	0x400264a0

08001610 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <HAL_FMC_MspInit+0x110>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d175      	bne.n	8001718 <HAL_FMC_MspInit+0x108>
    return;
  }
  FMC_Initialized = 1;
 800162c:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <HAL_FMC_MspInit+0x110>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001632:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <HAL_FMC_MspInit+0x114>)
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001636:	4a3b      	ldr	r2, [pc, #236]	; (8001724 <HAL_FMC_MspInit+0x114>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6393      	str	r3, [r2, #56]	; 0x38
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <HAL_FMC_MspInit+0x114>)
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800164a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800164e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800165c:	230c      	movs	r3, #12
 800165e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4619      	mov	r1, r3
 8001664:	4830      	ldr	r0, [pc, #192]	; (8001728 <HAL_FMC_MspInit+0x118>)
 8001666:	f000 fe21 	bl	80022ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800166a:	f248 1333 	movw	r3, #33075	; 0x8133
 800166e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800167c:	230c      	movs	r3, #12
 800167e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4829      	ldr	r0, [pc, #164]	; (800172c <HAL_FMC_MspInit+0x11c>)
 8001686:	f000 fe11 	bl	80022ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800168a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800168e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800169c:	230c      	movs	r3, #12
 800169e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4822      	ldr	r0, [pc, #136]	; (8001730 <HAL_FMC_MspInit+0x120>)
 80016a6:	f000 fe01 	bl	80022ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80016aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80016ae:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016bc:	230c      	movs	r3, #12
 80016be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	481b      	ldr	r0, [pc, #108]	; (8001734 <HAL_FMC_MspInit+0x124>)
 80016c6:	f000 fdf1 	bl	80022ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80016ca:	2328      	movs	r3, #40	; 0x28
 80016cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016da:	230c      	movs	r3, #12
 80016dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4815      	ldr	r0, [pc, #84]	; (8001738 <HAL_FMC_MspInit+0x128>)
 80016e4:	f000 fde2 	bl	80022ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80016e8:	2308      	movs	r3, #8
 80016ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f8:	230c      	movs	r3, #12
 80016fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <HAL_FMC_MspInit+0x12c>)
 8001702:	f000 fdd3 	bl	80022ac <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2030      	movs	r0, #48	; 0x30
 800170c:	f000 fa37 	bl	8001b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8001710:	2030      	movs	r0, #48	; 0x30
 8001712:	f000 fa50 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
 8001716:	e000      	b.n	800171a <HAL_FMC_MspInit+0x10a>
    return;
 8001718:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000048 	.word	0x20000048
 8001724:	40023800 	.word	0x40023800
 8001728:	40021000 	.word	0x40021000
 800172c:	40021800 	.word	0x40021800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021400 	.word	0x40021400
 8001738:	40021c00 	.word	0x40021c00
 800173c:	40020800 	.word	0x40020800

08001740 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001748:	f7ff ff62 	bl	8001610 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <MemManage_Handler+0x4>

0800176e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <UsageFault_Handler+0x4>

0800177a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f000 f8cc 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <FMC_IRQHandler+0x10>)
 80017b6:	f002 ff81 	bl	80046bc <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000254 	.word	0x20000254

080017c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <DMA2_Stream3_IRQHandler+0x10>)
 80017ca:	f000 fb35 	bl	8001e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200001f0 	.word	0x200001f0

080017d8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <DMA2_Stream6_IRQHandler+0x10>)
 80017de:	f000 fb2b 	bl	8001e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000288 	.word	0x20000288

080017ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <SystemInit+0x5c>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a14      	ldr	r2, [pc, #80]	; (8001848 <SystemInit+0x5c>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <SystemInit+0x60>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a11      	ldr	r2, [pc, #68]	; (800184c <SystemInit+0x60>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <SystemInit+0x60>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <SystemInit+0x60>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	490d      	ldr	r1, [pc, #52]	; (800184c <SystemInit+0x60>)
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <SystemInit+0x64>)
 800181a:	4013      	ands	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <SystemInit+0x60>)
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <SystemInit+0x68>)
 8001822:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <SystemInit+0x60>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a08      	ldr	r2, [pc, #32]	; (800184c <SystemInit+0x60>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SystemInit+0x60>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <SystemInit+0x5c>)
 8001838:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800183c:	609a      	str	r2, [r3, #8]
#endif
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00
 800184c:	40023800 	.word	0x40023800
 8001850:	fef6ffff 	.word	0xfef6ffff
 8001854:	24003010 	.word	0x24003010

08001858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001890 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800185c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800185e:	e003      	b.n	8001868 <LoopCopyDataInit>

08001860 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001862:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001864:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001866:	3104      	adds	r1, #4

08001868 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800186c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800186e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001870:	d3f6      	bcc.n	8001860 <CopyDataInit>
  ldr  r2, =_sbss
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001874:	e002      	b.n	800187c <LoopFillZerobss>

08001876 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001876:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001878:	f842 3b04 	str.w	r3, [r2], #4

0800187c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800187e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001880:	d3f9      	bcc.n	8001876 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001882:	f7ff ffb3 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001886:	f006 fa57 	bl	8007d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188a:	f7fe fe9d 	bl	80005c8 <main>
  bx  lr    
 800188e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001890:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001894:	08007ec0 	.word	0x08007ec0
  ldr  r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800189c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80018a0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80018a4:	20000758 	.word	0x20000758

080018a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_Init+0x34>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_Init+0x34>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_Init+0x34>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_Init+0x34>)
 80018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f94d 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f808 	bl	80018e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff fd96 	bl	8001404 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x54>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x58>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f965 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00e      	b.n	8001930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d80a      	bhi.n	800192e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f92d 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_InitTick+0x5c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000004 	.word	0x20000004
 800193c:	2000000c 	.word	0x2000000c
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000000c 	.word	0x2000000c
 8001968:	200002ec 	.word	0x200002ec

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200002ec 	.word	0x200002ec

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_Delay+0x40>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000000c 	.word	0x2000000c

080019c8 <__NVIC_SetPriorityGrouping>:
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <__NVIC_SetPriorityGrouping+0x40>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x40>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00
 8001a0c:	05fa0000 	.word	0x05fa0000

08001a10 <__NVIC_GetPriorityGrouping>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff29 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff3e 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff31 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bf0:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_MPU_Disable+0x24>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <HAL_MPU_Disable+0x24>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfe:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <HAL_MPU_Disable+0x28>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	e000ed90 	.word	0xe000ed90

08001c18 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_MPU_Enable+0x34>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_MPU_Enable+0x38>)
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_MPU_Enable+0x38>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c3a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed90 	.word	0xe000ed90
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	785a      	ldrb	r2, [r3, #1]
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_MPU_ConfigRegion+0x84>)
 8001c62:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d029      	beq.n	8001cc0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <HAL_MPU_ConfigRegion+0x84>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7b1b      	ldrb	r3, [r3, #12]
 8001c78:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7adb      	ldrb	r3, [r3, #11]
 8001c7e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7a9b      	ldrb	r3, [r3, #10]
 8001c86:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7b5b      	ldrb	r3, [r3, #13]
 8001c8e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7b9b      	ldrb	r3, [r3, #14]
 8001c96:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7bdb      	ldrb	r3, [r3, #15]
 8001c9e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ca0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7a5b      	ldrb	r3, [r3, #9]
 8001ca6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ca8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7a1b      	ldrb	r3, [r3, #8]
 8001cae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cb0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cb8:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cbc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001cbe:	e005      	b.n	8001ccc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_MPU_ConfigRegion+0x84>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <HAL_MPU_ConfigRegion+0x84>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed90 	.word	0xe000ed90

08001cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff fe40 	bl	800196c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e099      	b.n	8001e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d18:	e00f      	b.n	8001d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d1a:	f7ff fe27 	bl	800196c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d908      	bls.n	8001d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2203      	movs	r2, #3
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e078      	b.n	8001e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e8      	bne.n	8001d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_DMA_Init+0x158>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d107      	bne.n	8001da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f023 0307 	bic.w	r3, r3, #7
 8001dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d117      	bne.n	8001dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00e      	beq.n	8001dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f9e9 	bl	80021b8 <DMA_CheckFifoParam>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2240      	movs	r2, #64	; 0x40
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e016      	b.n	8001e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f9a0 	bl	800214c <DMA_CalcBaseAndBitshift>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	223f      	movs	r2, #63	; 0x3f
 8001e16:	409a      	lsls	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	f010803f 	.word	0xf010803f

08001e38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <HAL_DMA_IRQHandler+0x258>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a92      	ldr	r2, [pc, #584]	; (8002094 <HAL_DMA_IRQHandler+0x25c>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0a9b      	lsrs	r3, r3, #10
 8001e50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2208      	movs	r2, #8
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01a      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0204 	bic.w	r2, r2, #4
 8001e8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2208      	movs	r2, #8
 8001e92:	409a      	lsls	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d012      	beq.n	8001eda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	f043 0202 	orr.w	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	2204      	movs	r2, #4
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00b      	beq.n	8001f10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	2204      	movs	r2, #4
 8001efe:	409a      	lsls	r2, r3
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	2210      	movs	r2, #16
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d043      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d03c      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f32:	2210      	movs	r2, #16
 8001f34:	409a      	lsls	r2, r3
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d018      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d108      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d024      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
 8001f66:	e01f      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e016      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0208 	bic.w	r2, r2, #8
 8001f96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2220      	movs	r2, #32
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 808e 	beq.w	80020d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8086 	beq.w	80020d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	2220      	movs	r2, #32
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d136      	bne.n	8002050 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0216 	bic.w	r2, r2, #22
 8001ff0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002000:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <HAL_DMA_IRQHandler+0x1da>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0208 	bic.w	r2, r2, #8
 8002020:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	223f      	movs	r2, #63	; 0x3f
 8002028:	409a      	lsls	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002042:	2b00      	cmp	r3, #0
 8002044:	d07d      	beq.n	8002142 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
        }
        return;
 800204e:	e078      	b.n	8002142 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01c      	beq.n	8002098 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d108      	bne.n	800207e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	2b00      	cmp	r3, #0
 8002072:	d030      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
 800207c:	e02b      	b.n	80020d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d027      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
 800208e:	e022      	b.n	80020d6 <HAL_DMA_IRQHandler+0x29e>
 8002090:	20000004 	.word	0x20000004
 8002094:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0210 	bic.w	r2, r2, #16
 80020b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d032      	beq.n	8002144 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d022      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3301      	adds	r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	429a      	cmp	r2, r3
 800210c:	d307      	bcc.n	800211e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f2      	bne.n	8002102 <HAL_DMA_IRQHandler+0x2ca>
 800211c:	e000      	b.n	8002120 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800211e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
 8002140:	e000      	b.n	8002144 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002142:	bf00      	nop
    }
  }
}
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop

0800214c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	3b10      	subs	r3, #16
 800215c:	4a13      	ldr	r2, [pc, #76]	; (80021ac <DMA_CalcBaseAndBitshift+0x60>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <DMA_CalcBaseAndBitshift+0x64>)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d908      	bls.n	800218c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002182:	4013      	ands	r3, r2
 8002184:	1d1a      	adds	r2, r3, #4
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58
 800218a:	e006      	b.n	800219a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002194:	4013      	ands	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	aaaaaaab 	.word	0xaaaaaaab
 80021b0:	08007e14 	.word	0x08007e14
 80021b4:	fffffc00 	.word	0xfffffc00

080021b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11f      	bne.n	8002212 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d855      	bhi.n	8002284 <DMA_CheckFifoParam+0xcc>
 80021d8:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <DMA_CheckFifoParam+0x28>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	08002203 	.word	0x08002203
 80021e8:	080021f1 	.word	0x080021f1
 80021ec:	08002285 	.word	0x08002285
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d045      	beq.n	8002288 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002200:	e042      	b.n	8002288 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800220a:	d13f      	bne.n	800228c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002210:	e03c      	b.n	800228c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221a:	d121      	bne.n	8002260 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d836      	bhi.n	8002290 <DMA_CheckFifoParam+0xd8>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <DMA_CheckFifoParam+0x70>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	08002239 	.word	0x08002239
 800222c:	0800223f 	.word	0x0800223f
 8002230:	08002239 	.word	0x08002239
 8002234:	08002251 	.word	0x08002251
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      break;
 800223c:	e02f      	b.n	800229e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d024      	beq.n	8002294 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224e:	e021      	b.n	8002294 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002258:	d11e      	bne.n	8002298 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800225e:	e01b      	b.n	8002298 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d902      	bls.n	800226c <DMA_CheckFifoParam+0xb4>
 8002266:	2b03      	cmp	r3, #3
 8002268:	d003      	beq.n	8002272 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800226a:	e018      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e015      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00e      	beq.n	800229c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      break;
 8002282:	e00b      	b.n	800229c <DMA_CheckFifoParam+0xe4>
      break;
 8002284:	bf00      	nop
 8002286:	e00a      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 8002288:	bf00      	nop
 800228a:	e008      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 800228c:	bf00      	nop
 800228e:	e006      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 8002290:	bf00      	nop
 8002292:	e004      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 8002294:	bf00      	nop
 8002296:	e002      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;   
 8002298:	bf00      	nop
 800229a:	e000      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 800229c:	bf00      	nop
    }
  } 
  
  return status; 
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e175      	b.n	80025b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022cc:	2201      	movs	r2, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8164 	bne.w	80025b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x4e>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	69b9      	ldr	r1, [r7, #24]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d00b      	beq.n	8002396 <HAL_GPIO_Init+0xea>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d007      	beq.n	8002396 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238a:	2b11      	cmp	r3, #17
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b12      	cmp	r3, #18
 8002394:	d130      	bne.n	80023f8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 0201 	and.w	r2, r3, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80be 	beq.w	80025b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	4b65      	ldr	r3, [pc, #404]	; (80025cc <HAL_GPIO_Init+0x320>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a64      	ldr	r2, [pc, #400]	; (80025cc <HAL_GPIO_Init+0x320>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b62      	ldr	r3, [pc, #392]	; (80025cc <HAL_GPIO_Init+0x320>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800244e:	4a60      	ldr	r2, [pc, #384]	; (80025d0 <HAL_GPIO_Init+0x324>)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a57      	ldr	r2, [pc, #348]	; (80025d4 <HAL_GPIO_Init+0x328>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d037      	beq.n	80024ea <HAL_GPIO_Init+0x23e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a56      	ldr	r2, [pc, #344]	; (80025d8 <HAL_GPIO_Init+0x32c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d031      	beq.n	80024e6 <HAL_GPIO_Init+0x23a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a55      	ldr	r2, [pc, #340]	; (80025dc <HAL_GPIO_Init+0x330>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02b      	beq.n	80024e2 <HAL_GPIO_Init+0x236>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a54      	ldr	r2, [pc, #336]	; (80025e0 <HAL_GPIO_Init+0x334>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d025      	beq.n	80024de <HAL_GPIO_Init+0x232>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a53      	ldr	r2, [pc, #332]	; (80025e4 <HAL_GPIO_Init+0x338>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01f      	beq.n	80024da <HAL_GPIO_Init+0x22e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_GPIO_Init+0x33c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d019      	beq.n	80024d6 <HAL_GPIO_Init+0x22a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a51      	ldr	r2, [pc, #324]	; (80025ec <HAL_GPIO_Init+0x340>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_GPIO_Init+0x226>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a50      	ldr	r2, [pc, #320]	; (80025f0 <HAL_GPIO_Init+0x344>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00d      	beq.n	80024ce <HAL_GPIO_Init+0x222>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4f      	ldr	r2, [pc, #316]	; (80025f4 <HAL_GPIO_Init+0x348>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <HAL_GPIO_Init+0x21e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4e      	ldr	r2, [pc, #312]	; (80025f8 <HAL_GPIO_Init+0x34c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_GPIO_Init+0x21a>
 80024c2:	2309      	movs	r3, #9
 80024c4:	e012      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024c6:	230a      	movs	r3, #10
 80024c8:	e010      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024ca:	2308      	movs	r3, #8
 80024cc:	e00e      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024ce:	2307      	movs	r3, #7
 80024d0:	e00c      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024d2:	2306      	movs	r3, #6
 80024d4:	e00a      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024d6:	2305      	movs	r3, #5
 80024d8:	e008      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024da:	2304      	movs	r3, #4
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024de:	2303      	movs	r3, #3
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x240>
 80024ea:	2300      	movs	r3, #0
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f002 0203 	and.w	r2, r2, #3
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024fc:	4934      	ldr	r1, [pc, #208]	; (80025d0 <HAL_GPIO_Init+0x324>)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250a:	4b3c      	ldr	r3, [pc, #240]	; (80025fc <HAL_GPIO_Init+0x350>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252e:	4a33      	ldr	r2, [pc, #204]	; (80025fc <HAL_GPIO_Init+0x350>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_GPIO_Init+0x350>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002558:	4a28      	ldr	r2, [pc, #160]	; (80025fc <HAL_GPIO_Init+0x350>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255e:	4b27      	ldr	r3, [pc, #156]	; (80025fc <HAL_GPIO_Init+0x350>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002582:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <HAL_GPIO_Init+0x350>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <HAL_GPIO_Init+0x350>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025ac:	4a13      	ldr	r2, [pc, #76]	; (80025fc <HAL_GPIO_Init+0x350>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	f67f ae86 	bls.w	80022cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	3724      	adds	r7, #36	; 0x24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40021400 	.word	0x40021400
 80025ec:	40021800 	.word	0x40021800
 80025f0:	40021c00 	.word	0x40021c00
 80025f4:	40022000 	.word	0x40022000
 80025f8:	40022400 	.word	0x40022400
 80025fc:	40013c00 	.word	0x40013c00

08002600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e001      	b.n	8002622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800264c:	e003      	b.n	8002656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	041a      	lsls	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	619a      	str	r2, [r3, #24]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40007000 	.word	0x40007000

08002684 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_PWREx_EnableOverDrive+0x98>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a22      	ldr	r2, [pc, #136]	; (800271c <HAL_PWREx_EnableOverDrive+0x98>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_PWREx_EnableOverDrive+0x98>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b2:	f7ff f95b 	bl	800196c <HAL_GetTick>
 80026b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026b8:	e009      	b.n	80026ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026ba:	f7ff f957 	bl	800196c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026c8:	d901      	bls.n	80026ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e022      	b.n	8002714 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026da:	d1ee      	bne.n	80026ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e8:	f7ff f940 	bl	800196c <HAL_GetTick>
 80026ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026ee:	e009      	b.n	8002704 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026f0:	f7ff f93c 	bl	800196c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026fe:	d901      	bls.n	8002704 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e007      	b.n	8002714 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002710:	d1ee      	bne.n	80026f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	40007000 	.word	0x40007000

08002724 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800272c:	2300      	movs	r3, #0
 800272e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e25c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8087 	beq.w	8002856 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002748:	4b96      	ldr	r3, [pc, #600]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b04      	cmp	r3, #4
 8002752:	d00c      	beq.n	800276e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002754:	4b93      	ldr	r3, [pc, #588]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b08      	cmp	r3, #8
 800275e:	d112      	bne.n	8002786 <HAL_RCC_OscConfig+0x62>
 8002760:	4b90      	ldr	r3, [pc, #576]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276c:	d10b      	bne.n	8002786 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276e:	4b8d      	ldr	r3, [pc, #564]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d06c      	beq.n	8002854 <HAL_RCC_OscConfig+0x130>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d168      	bne.n	8002854 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e236      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x7a>
 8002790:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a83      	ldr	r2, [pc, #524]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e02e      	b.n	80027fc <HAL_RCC_OscConfig+0xd8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x9c>
 80027a6:	4b7f      	ldr	r3, [pc, #508]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7e      	ldr	r2, [pc, #504]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b7c      	ldr	r3, [pc, #496]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a7b      	ldr	r2, [pc, #492]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01d      	b.n	80027fc <HAL_RCC_OscConfig+0xd8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0xc0>
 80027ca:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a75      	ldr	r2, [pc, #468]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a72      	ldr	r2, [pc, #456]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0xd8>
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a6e      	ldr	r2, [pc, #440]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b6c      	ldr	r3, [pc, #432]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a6b      	ldr	r2, [pc, #428]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7ff f8b2 	bl	800196c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff f8ae 	bl	800196c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1ea      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0xe8>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7ff f89e 	bl	800196c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7ff f89a 	bl	800196c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e1d6      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x110>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d069      	beq.n	8002936 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002862:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b08      	cmp	r3, #8
 8002878:	d11c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x190>
 800287a:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d116      	bne.n	80028b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x17a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1aa      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	493d      	ldr	r1, [pc, #244]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	e040      	b.n	8002936 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d023      	beq.n	8002904 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028bc:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff f850 	bl	800196c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d0:	f7ff f84c 	bl	800196c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e188      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4929      	ldr	r1, [pc, #164]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
 8002902:	e018      	b.n	8002936 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7ff f82c 	bl	800196c <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002918:	f7ff f828 	bl	800196c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e164      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d038      	beq.n	80029b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d019      	beq.n	800297e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 800294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294e:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7ff f809 	bl	800196c <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295e:	f7ff f805 	bl	800196c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e141      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x23a>
 800297c:	e01a      	b.n	80029b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <HAL_RCC_OscConfig+0x280>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298a:	f7fe ffef 	bl	800196c <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002992:	f7fe ffeb 	bl	800196c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d903      	bls.n	80029a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e127      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
 80029a4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	4b94      	ldr	r3, [pc, #592]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ee      	bne.n	8002992 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a4 	beq.w	8002b0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b8e      	ldr	r3, [pc, #568]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b8b      	ldr	r3, [pc, #556]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a8a      	ldr	r2, [pc, #552]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029e6:	2301      	movs	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ea:	4b85      	ldr	r3, [pc, #532]	; (8002c00 <HAL_RCC_OscConfig+0x4dc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d118      	bne.n	8002a28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029f6:	4b82      	ldr	r3, [pc, #520]	; (8002c00 <HAL_RCC_OscConfig+0x4dc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a81      	ldr	r2, [pc, #516]	; (8002c00 <HAL_RCC_OscConfig+0x4dc>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a02:	f7fe ffb3 	bl	800196c <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a0a:	f7fe ffaf 	bl	800196c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b64      	cmp	r3, #100	; 0x64
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0eb      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1c:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <HAL_RCC_OscConfig+0x4dc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x31a>
 8002a30:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a71      	ldr	r2, [pc, #452]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3c:	e02d      	b.n	8002a9a <HAL_RCC_OscConfig+0x376>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x33c>
 8002a46:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a6c      	ldr	r2, [pc, #432]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
 8002a52:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a69      	ldr	r2, [pc, #420]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a58:	f023 0304 	bic.w	r3, r3, #4
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5e:	e01c      	b.n	8002a9a <HAL_RCC_OscConfig+0x376>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d10c      	bne.n	8002a82 <HAL_RCC_OscConfig+0x35e>
 8002a68:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a63      	ldr	r2, [pc, #396]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a6e:	f043 0304 	orr.w	r3, r3, #4
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a60      	ldr	r2, [pc, #384]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	e00b      	b.n	8002a9a <HAL_RCC_OscConfig+0x376>
 8002a82:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	4a5d      	ldr	r2, [pc, #372]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a5a      	ldr	r2, [pc, #360]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d015      	beq.n	8002ace <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7fe ff63 	bl	800196c <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe ff5f 	bl	800196c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e099      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ee      	beq.n	8002aaa <HAL_RCC_OscConfig+0x386>
 8002acc:	e014      	b.n	8002af8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7fe ff4d 	bl	800196c <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe ff49 	bl	800196c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e083      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aec:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ee      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d105      	bne.n	8002b0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afe:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a3e      	ldr	r2, [pc, #248]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d06f      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b12:	4b3a      	ldr	r3, [pc, #232]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d067      	beq.n	8002bee <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d149      	bne.n	8002bba <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7fe ff1b 	bl	800196c <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3a:	f7fe ff17 	bl	800196c <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e053      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	019b      	lsls	r3, r3, #6
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	3b01      	subs	r3, #1
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002b80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b84:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe feeb 	bl	800196c <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe fee7 	bl	800196c <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e023      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x476>
 8002bb8:	e01b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fed1 	bl	800196c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe fecd 	bl	800196c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e009      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCC_OscConfig+0x4d8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f0      	bne.n	8002bce <HAL_RCC_OscConfig+0x4aa>
 8002bec:	e001      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40007000 	.word	0x40007000

08002c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0ce      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d910      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 020f 	bic.w	r2, r3, #15
 8002c32:	4964      	ldr	r1, [pc, #400]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b62      	ldr	r3, [pc, #392]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b6      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a57      	ldr	r2, [pc, #348]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b52      	ldr	r3, [pc, #328]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a51      	ldr	r2, [pc, #324]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494c      	ldr	r1, [pc, #304]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d040      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d115      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07d      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e071      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e069      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b38      	ldr	r3, [pc, #224]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4935      	ldr	r1, [pc, #212]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fe38 	bl	800196c <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7fe fe34 	bl	800196c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e051      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 020c 	and.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1eb      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d210      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 020f 	bic.w	r2, r3, #15
 8002d3e:	4921      	ldr	r1, [pc, #132]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e030      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4915      	ldr	r1, [pc, #84]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490d      	ldr	r1, [pc, #52]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f81d 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	fa21 f303 	lsr.w	r3, r1, r3
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002db2:	2000      	movs	r0, #0
 8002db4:	f7fe fd96 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023c00 	.word	0x40023c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	08007e04 	.word	0x08007e04
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	2300      	movs	r3, #0
 8002de4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dea:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x158>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d007      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0x32>
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d008      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x38>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 808d 	bne.w	8002f1a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e02:	60bb      	str	r3, [r7, #8]
       break;
 8002e04:	e08c      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e06:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e08:	60bb      	str	r3, [r7, #8]
      break;
 8002e0a:	e089      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e0c:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x158>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e14:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e16:	4b45      	ldr	r3, [pc, #276]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x158>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d023      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e22:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x158>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	f04f 0400 	mov.w	r4, #0
 8002e2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	ea03 0501 	and.w	r5, r3, r1
 8002e38:	ea04 0602 	and.w	r6, r4, r2
 8002e3c:	4a3d      	ldr	r2, [pc, #244]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e3e:	fb02 f106 	mul.w	r1, r2, r6
 8002e42:	2200      	movs	r2, #0
 8002e44:	fb02 f205 	mul.w	r2, r2, r5
 8002e48:	440a      	add	r2, r1
 8002e4a:	493a      	ldr	r1, [pc, #232]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e4c:	fba5 0101 	umull	r0, r1, r5, r1
 8002e50:	1853      	adds	r3, r2, r1
 8002e52:	4619      	mov	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f04f 0400 	mov.w	r4, #0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	f7fd f9d3 	bl	8000208 <__aeabi_uldivmod>
 8002e62:	4603      	mov	r3, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e049      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6a:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x158>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	ea03 0501 	and.w	r5, r3, r1
 8002e80:	ea04 0602 	and.w	r6, r4, r2
 8002e84:	4629      	mov	r1, r5
 8002e86:	4632      	mov	r2, r6
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	f04f 0400 	mov.w	r4, #0
 8002e90:	0154      	lsls	r4, r2, #5
 8002e92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e96:	014b      	lsls	r3, r1, #5
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	1b49      	subs	r1, r1, r5
 8002e9e:	eb62 0206 	sbc.w	r2, r2, r6
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	f04f 0400 	mov.w	r4, #0
 8002eaa:	0194      	lsls	r4, r2, #6
 8002eac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eb0:	018b      	lsls	r3, r1, #6
 8002eb2:	1a5b      	subs	r3, r3, r1
 8002eb4:	eb64 0402 	sbc.w	r4, r4, r2
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	00e2      	lsls	r2, r4, #3
 8002ec2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ec6:	00d9      	lsls	r1, r3, #3
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4614      	mov	r4, r2
 8002ecc:	195b      	adds	r3, r3, r5
 8002ece:	eb44 0406 	adc.w	r4, r4, r6
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	02a2      	lsls	r2, r4, #10
 8002edc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ee0:	0299      	lsls	r1, r3, #10
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	4621      	mov	r1, r4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f04f 0400 	mov.w	r4, #0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	f7fd f988 	bl	8000208 <__aeabi_uldivmod>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x158>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0c1b      	lsrs	r3, r3, #16
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	60bb      	str	r3, [r7, #8]
      break;
 8002f18:	e002      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f1c:	60bb      	str	r3, [r7, #8]
      break;
 8002f1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f20:	68bb      	ldr	r3, [r7, #8]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	017d7840 	.word	0x017d7840

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f60:	4b69      	ldr	r3, [pc, #420]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a68      	ldr	r2, [pc, #416]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f6a:	6093      	str	r3, [r2, #8]
 8002f6c:	4b66      	ldr	r3, [pc, #408]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	4964      	ldr	r1, [pc, #400]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d017      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f92:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	4959      	ldr	r1, [pc, #356]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d017      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fce:	4b4e      	ldr	r3, [pc, #312]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	494a      	ldr	r1, [pc, #296]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800300a:	2301      	movs	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 808b 	beq.w	8003132 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800301c:	4b3a      	ldr	r3, [pc, #232]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	4a39      	ldr	r2, [pc, #228]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003026:	6413      	str	r3, [r2, #64]	; 0x40
 8003028:	4b37      	ldr	r3, [pc, #220]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003034:	4b35      	ldr	r3, [pc, #212]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a34      	ldr	r2, [pc, #208]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003040:	f7fe fc94 	bl	800196c <HAL_GetTick>
 8003044:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fe fc90 	bl	800196c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e355      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800305a:	4b2c      	ldr	r3, [pc, #176]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d035      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	429a      	cmp	r2, r3
 8003082:	d02e      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003084:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030ac:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d114      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe fc58 	bl	800196c <HAL_GetTick>
 80030bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fe fc54 	bl	800196c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e317      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ee      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ee:	d111      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030fe:	400b      	ands	r3, r1
 8003100:	4901      	ldr	r1, [pc, #4]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
 8003106:	e00b      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003108:	40023800 	.word	0x40023800
 800310c:	40007000 	.word	0x40007000
 8003110:	0ffffcff 	.word	0x0ffffcff
 8003114:	4bb0      	ldr	r3, [pc, #704]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4aaf      	ldr	r2, [pc, #700]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800311a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800311e:	6093      	str	r3, [r2, #8]
 8003120:	4bad      	ldr	r3, [pc, #692]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	49aa      	ldr	r1, [pc, #680]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800312e:	4313      	orrs	r3, r2
 8003130:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800313e:	4ba6      	ldr	r3, [pc, #664]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003144:	4aa4      	ldr	r2, [pc, #656]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800314e:	4ba2      	ldr	r3, [pc, #648]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003150:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	499f      	ldr	r1, [pc, #636]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800316c:	4b9a      	ldr	r3, [pc, #616]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800317a:	4997      	ldr	r1, [pc, #604]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800318e:	4b92      	ldr	r3, [pc, #584]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800319c:	498e      	ldr	r1, [pc, #568]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b0:	4b89      	ldr	r3, [pc, #548]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031be:	4986      	ldr	r1, [pc, #536]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031d2:	4b81      	ldr	r3, [pc, #516]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	497d      	ldr	r1, [pc, #500]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031f4:	4b78      	ldr	r3, [pc, #480]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	4975      	ldr	r1, [pc, #468]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003216:	4b70      	ldr	r3, [pc, #448]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	f023 020c 	bic.w	r2, r3, #12
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003224:	496c      	ldr	r1, [pc, #432]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003238:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	4964      	ldr	r1, [pc, #400]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800325a:	4b5f      	ldr	r3, [pc, #380]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	495b      	ldr	r1, [pc, #364]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800327c:	4b56      	ldr	r3, [pc, #344]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	4953      	ldr	r1, [pc, #332]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800329e:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	494a      	ldr	r1, [pc, #296]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032c0:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	4942      	ldr	r1, [pc, #264]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	4939      	ldr	r1, [pc, #228]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003312:	4931      	ldr	r1, [pc, #196]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d011      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003334:	4928      	ldr	r1, [pc, #160]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003346:	2301      	movs	r3, #1
 8003348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003356:	2301      	movs	r3, #1
 8003358:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003366:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003374:	4918      	ldr	r1, [pc, #96]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003398:	490f      	ldr	r1, [pc, #60]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d005      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ae:	f040 80d8 	bne.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033be:	f7fe fad5 	bl	800196c <HAL_GetTick>
 80033c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033c6:	f7fe fad1 	bl	800196c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b64      	cmp	r3, #100	; 0x64
 80033d2:	d903      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e196      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80033d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033dc:	4b6c      	ldr	r3, [pc, #432]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ee      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d021      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11d      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033fc:	4b64      	ldr	r3, [pc, #400]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003402:	0c1b      	lsrs	r3, r3, #16
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800340a:	4b61      	ldr	r3, [pc, #388]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800340c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003410:	0e1b      	lsrs	r3, r3, #24
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	019a      	lsls	r2, r3, #6
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	071b      	lsls	r3, r3, #28
 8003430:	4957      	ldr	r1, [pc, #348]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02e      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003462:	d129      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003464:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346a:	0c1b      	lsrs	r3, r3, #16
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003472:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003478:	0f1b      	lsrs	r3, r3, #28
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	019a      	lsls	r2, r3, #6
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	431a      	orrs	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	071b      	lsls	r3, r3, #28
 8003498:	493d      	ldr	r1, [pc, #244]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a6:	f023 021f 	bic.w	r2, r3, #31
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	3b01      	subs	r3, #1
 80034b0:	4937      	ldr	r1, [pc, #220]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01d      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ca:	0e1b      	lsrs	r3, r3, #24
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d8:	0f1b      	lsrs	r3, r3, #28
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	019a      	lsls	r2, r3, #6
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	431a      	orrs	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	431a      	orrs	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	071b      	lsls	r3, r3, #28
 80034f8:	4925      	ldr	r1, [pc, #148]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d011      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	019a      	lsls	r2, r3, #6
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	061b      	lsls	r3, r3, #24
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	071b      	lsls	r3, r3, #28
 8003528:	4919      	ldr	r1, [pc, #100]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003530:	4b17      	ldr	r3, [pc, #92]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a16      	ldr	r2, [pc, #88]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003536:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800353a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353c:	f7fe fa16 	bl	800196c <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003544:	f7fe fa12 	bl	800196c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0d7      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 80cd 	bne.w	8003704 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a08      	ldr	r2, [pc, #32]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003576:	f7fe f9f9 	bl	800196c <HAL_GetTick>
 800357a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800357c:	e00a      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800357e:	f7fe f9f5 	bl	800196c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b64      	cmp	r3, #100	; 0x64
 800358a:	d903      	bls.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0ba      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003590:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003594:	4b5e      	ldr	r3, [pc, #376]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800359c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a0:	d0ed      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02e      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d12a      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035ca:	4b51      	ldr	r3, [pc, #324]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035d8:	4b4d      	ldr	r3, [pc, #308]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	0f1b      	lsrs	r3, r3, #28
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	019a      	lsls	r2, r3, #6
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	061b      	lsls	r3, r3, #24
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	071b      	lsls	r3, r3, #28
 80035fe:	4944      	ldr	r1, [pc, #272]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003606:	4b42      	ldr	r3, [pc, #264]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800360c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	493d      	ldr	r1, [pc, #244]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d022      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003634:	d11d      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	0e1b      	lsrs	r3, r3, #24
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003644:	4b32      	ldr	r3, [pc, #200]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	0f1b      	lsrs	r3, r3, #28
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	019a      	lsls	r2, r3, #6
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	431a      	orrs	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	061b      	lsls	r3, r3, #24
 8003664:	431a      	orrs	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	071b      	lsls	r3, r3, #28
 800366a:	4929      	ldr	r1, [pc, #164]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d028      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800367e:	4b24      	ldr	r3, [pc, #144]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	0e1b      	lsrs	r3, r3, #24
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800368c:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	019a      	lsls	r2, r3, #6
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	041b      	lsls	r3, r3, #16
 80036a4:	431a      	orrs	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	071b      	lsls	r3, r3, #28
 80036b2:	4917      	ldr	r1, [pc, #92]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	4911      	ldr	r1, [pc, #68]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0e      	ldr	r2, [pc, #56]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036dc:	f7fe f946 	bl	800196c <HAL_GetTick>
 80036e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036e4:	f7fe f942 	bl	800196c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e007      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003702:	d1ef      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e01d      	b.n	8003762 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fd fe87 	bl	800144c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f80f 	bl	800376a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800376a:	b5b0      	push	{r4, r5, r7, lr}
 800376c:	b08e      	sub	sp, #56	; 0x38
 800376e:	af04      	add	r7, sp, #16
 8003770:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800378a:	2376      	movs	r3, #118	; 0x76
 800378c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681d      	ldr	r5, [r3, #0]
 8003792:	466c      	mov	r4, sp
 8003794:	f107 0318 	add.w	r3, r7, #24
 8003798:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800379c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a6:	4628      	mov	r0, r5
 80037a8:	f001 f922 	bl	80049f0 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ba:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 f95f 	bl	8004a84 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80037d6:	2002      	movs	r0, #2
 80037d8:	f7fe f8d4 	bl	8001984 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fe67 	bl	80044b0 <SD_PowerON>
 80037e2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e013      	b.n	800382a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fd8b 	bl	800431e <SD_InitCard>
 8003808:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00b      	beq.n	8003828 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3728      	adds	r7, #40	; 0x28
 800382e:	46bd      	mov	sp, r7
 8003830:	bdb0      	pop	{r4, r5, r7, pc}

08003832 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003832:	b590      	push	{r4, r7, lr}
 8003834:	b08f      	sub	sp, #60	; 0x3c
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003840:	2300      	movs	r3, #0
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7fe f892 	bl	800196c <HAL_GetTick>
 8003848:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 800384a:	2300      	movs	r3, #0
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e176      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	f040 8169 	bne.w	8003b48 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	429a      	cmp	r2, r3
 8003888:	d907      	bls.n	800389a <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e15d      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2203      	movs	r2, #3
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2200      	movs	r2, #0
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d002      	beq.n	80038b8 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	025b      	lsls	r3, r3, #9
 80038b6:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 f973 	bl	8004bac <SDMMC_CmdBlockLength>
 80038c6:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80038c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d010      	beq.n	80038f0 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e132      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	025b      	lsls	r3, r3, #9
 80038fa:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80038fc:	2390      	movs	r3, #144	; 0x90
 80038fe:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003900:	2302      	movs	r3, #2
 8003902:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003904:	2300      	movs	r3, #0
 8003906:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003908:	2301      	movs	r3, #1
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f107 0210 	add.w	r2, r7, #16
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f001 f91c 	bl	8004b54 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d90a      	bls.n	8003938 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2202      	movs	r2, #2
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f984 	bl	8004c3c <SDMMC_CmdReadMultiBlock>
 8003934:	6378      	str	r0, [r7, #52]	; 0x34
 8003936:	e009      	b.n	800394c <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f955 	bl	8004bf4 <SDMMC_CmdReadSingleBlock>
 800394a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	2b00      	cmp	r3, #0
 8003950:	d04a      	beq.n	80039e8 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003962:	431a      	orrs	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0f0      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003982:	2300      	movs	r3, #0
 8003984:	633b      	str	r3, [r7, #48]	; 0x30
 8003986:	e00d      	b.n	80039a4 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6819      	ldr	r1, [r3, #0]
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003992:	18d4      	adds	r4, r2, r3
 8003994:	4608      	mov	r0, r1
 8003996:	f001 f857 	bl	8004a48 <SDMMC_ReadFIFO>
 800399a:	4603      	mov	r3, r0
 800399c:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	3301      	adds	r3, #1
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d9ee      	bls.n	8003988 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	3320      	adds	r3, #32
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80039b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_SD_ReadBlocks+0x194>
 80039b6:	f7fd ffd9 	bl	800196c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d810      	bhi.n	80039e8 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0b6      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0be      	beq.n	8003974 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_SD_ReadBlocks+0x214>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d91d      	bls.n	8003a46 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d019      	beq.n	8003a46 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 f97c 	bl	8004d14 <SDMMC_CmdStopTransfer>
 8003a1c:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e087      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d010      	beq.n	8003a76 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	f043 0208 	orr.w	r2, r3, #8
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e06f      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	f043 0202 	orr.w	r2, r3, #2
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e057      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d037      	beq.n	8003b24 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e03f      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 ffb4 	bl	8004a48 <SDMMC_ReadFIFO>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	3304      	adds	r3, #4
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <HAL_SD_ReadBlocks+0x2d0>
 8003af2:	f7fd ff3b 	bl	800196c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d810      	bhi.n	8003b24 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e018      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1d1      	bne.n	8003ad6 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e006      	b.n	8003b56 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	373c      	adds	r7, #60	; 0x3c
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}

08003b5e <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08e      	sub	sp, #56	; 0x38
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8003b70:	f7fd fefc 	bl	800196c <HAL_GetTick>
 8003b74:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e147      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f040 813a 	bne.w	8003e16 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	441a      	add	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d907      	bls.n	8003bc6 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e12e      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d002      	beq.n	8003be4 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	025b      	lsls	r3, r3, #9
 8003be2:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 ffdd 	bl	8004bac <SDMMC_CmdBlockLength>
 8003bf2:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e103      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d90a      	bls.n	8003c38 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f84c 	bl	8004ccc <SDMMC_CmdWriteMultiBlock>
 8003c34:	6378      	str	r0, [r7, #52]	; 0x34
 8003c36:	e009      	b.n	8003c4c <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f81d 	bl	8004c84 <SDMMC_CmdWriteSingleBlock>
 8003c4a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0d7      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	025b      	lsls	r3, r3, #9
 8003c7e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003c80:	2390      	movs	r3, #144	; 0x90
 8003c82:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f107 0210 	add.w	r2, r7, #16
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 ff5a 	bl	8004b54 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003ca0:	e037      	b.n	8003d12 <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d014      	beq.n	8003cda <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb4:	e00b      	b.n	8003cce <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f000 fecd 	bl	8004a62 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	3301      	adds	r3, #1
 8003ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	2b07      	cmp	r3, #7
 8003cd2:	d9f0      	bls.n	8003cb6 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	3320      	adds	r3, #32
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_SD_WriteBlocks+0x192>
 8003ce0:	f7fd fe44 	bl	800196c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d810      	bhi.n	8003d12 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e088      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0c0      	beq.n	8003ca2 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d020      	beq.n	8003d70 <HAL_SD_WriteBlocks+0x212>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d91d      	bls.n	8003d70 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d019      	beq.n	8003d70 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 ffe7 	bl	8004d14 <SDMMC_CmdStopTransfer>
 8003d46:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d010      	beq.n	8003d70 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e059      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d010      	beq.n	8003da0 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	f043 0208 	orr.w	r2, r3, #8
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e041      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d010      	beq.n	8003dd0 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	f043 0202 	orr.w	r2, r3, #2
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e029      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d010      	beq.n	8003e00 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	f043 0210 	orr.w	r2, r3, #16
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e011      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e006      	b.n	8003e24 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3738      	adds	r7, #56	; 0x38
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3e:	0e1b      	lsrs	r3, r3, #24
 8003e40:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea8:	0e1b      	lsrs	r3, r3, #24
 8003eaa:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	88db      	ldrh	r3, [r3, #6]
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	09db      	lsrs	r3, r3, #7
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 8086 	bne.w	8004050 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	029b      	lsls	r3, r3, #10
 8003f48:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	431a      	orrs	r2, r3
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6a:	0e1b      	lsrs	r3, r3, #24
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	099b      	lsrs	r3, r3, #6
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	08db      	lsrs	r3, r3, #3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f003 0306 	and.w	r3, r3, #6
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	7e1b      	ldrb	r3, [r3, #24]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	09db      	lsrs	r3, r3, #7
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	7e1b      	ldrb	r3, [r3, #24]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3302      	adds	r3, #2
 8004012:	2201      	movs	r2, #1
 8004014:	409a      	lsls	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	fb02 f203 	mul.w	r2, r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	7a1b      	ldrb	r3, [r3, #8]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	2301      	movs	r3, #1
 800402c:	4093      	lsls	r3, r2
 800402e:	461a      	mov	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800403c:	0a52      	lsrs	r2, r2, #9
 800403e:	fb02 f203 	mul.w	r2, r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404c:	661a      	str	r2, [r3, #96]	; 0x60
 800404e:	e04d      	b.n	80040ec <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	2b01      	cmp	r3, #1
 8004056:	d138      	bne.n	80040ca <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800405c:	b2db      	uxtb	r3, r3
 800405e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004070:	0e1b      	lsrs	r3, r3, #24
 8004072:	b2db      	uxtb	r3, r3
 8004074:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	431a      	orrs	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	b2db      	uxtb	r3, r3
 800408c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	431a      	orrs	r2, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	3301      	adds	r3, #1
 80040aa:	029a      	lsls	r2, r3, #10
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040be:	659a      	str	r2, [r3, #88]	; 0x58
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60
 80040c8:	e010      	b.n	80040ec <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0c1      	b.n	8004270 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004108:	b2da      	uxtb	r2, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	b2db      	uxtb	r3, r3
 8004114:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	7e9b      	ldrb	r3, [r3, #26]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	09db      	lsrs	r3, r3, #7
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	4313      	orrs	r3, r2
 800412a:	b2da      	uxtb	r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004138:	b2da      	uxtb	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	0e1b      	lsrs	r3, r3, #24
 8004144:	b2db      	uxtb	r3, r3
 8004146:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	09db      	lsrs	r3, r3, #7
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	b2da      	uxtb	r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	b2da      	uxtb	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	b2da      	uxtb	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	b2da      	uxtb	r2, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	b2db      	uxtb	r3, r3
 8004192:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	7fdb      	ldrb	r3, [r3, #31]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	099b      	lsrs	r3, r3, #6
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	4313      	orrs	r3, r2
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	09db      	lsrs	r3, r3, #7
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	b2da      	uxtb	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	b2da      	uxtb	r2, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	b2da      	uxtb	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	b2db      	uxtb	r3, r3
 8004252:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425e:	b2da      	uxtb	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80042dc:	2304      	movs	r3, #4
 80042de:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f986 	bl	8004600 <SD_SendStatus>
 80042f4:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	0a5b      	lsrs	r3, r3, #9
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800431e:	b5b0      	push	{r4, r5, r7, lr}
 8004320:	b094      	sub	sp, #80	; 0x50
 8004322:	af04      	add	r7, sp, #16
 8004324:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004326:	2300      	movs	r3, #0
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800432a:	2301      	movs	r3, #1
 800432c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fbb4 	bl	8004aa0 <SDMMC_GetPowerState>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800433e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004342:	e0b1      	b.n	80044a8 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	2b03      	cmp	r3, #3
 800434a:	d02f      	beq.n	80043ac <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fdb3 	bl	8004ebc <SDMMC_CmdSendCID>
 8004356:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <SD_InitCard+0x44>
    {
      return errorstate;
 800435e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004360:	e0a2      	b.n	80044a8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fbde 	bl	8004b2a <SDMMC_GetResponse>
 800436e:	4602      	mov	r2, r0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2104      	movs	r1, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fbd5 	bl	8004b2a <SDMMC_GetResponse>
 8004380:	4602      	mov	r2, r0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2108      	movs	r1, #8
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fbcc 	bl	8004b2a <SDMMC_GetResponse>
 8004392:	4602      	mov	r2, r0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	210c      	movs	r1, #12
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fbc3 	bl	8004b2a <SDMMC_GetResponse>
 80043a4:	4602      	mov	r2, r0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d00d      	beq.n	80043d0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f107 020e 	add.w	r2, r7, #14
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fdbd 	bl	8004f3e <SDMMC_CmdSetRelAdd>
 80043c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80043c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <SD_InitCard+0xb2>
    {
      return errorstate;
 80043cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ce:	e06b      	b.n	80044a8 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d036      	beq.n	8004446 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80043d8:	89fb      	ldrh	r3, [r7, #14]
 80043da:	461a      	mov	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f000 fd85 	bl	8004efc <SDMMC_CmdSendCSD>
 80043f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80043f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <SD_InitCard+0xe0>
    {
      return errorstate;
 80043fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fc:	e054      	b.n	80044a8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2100      	movs	r1, #0
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fb90 	bl	8004b2a <SDMMC_GetResponse>
 800440a:	4602      	mov	r2, r0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2104      	movs	r1, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fb87 	bl	8004b2a <SDMMC_GetResponse>
 800441c:	4602      	mov	r2, r0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2108      	movs	r1, #8
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fb7e 	bl	8004b2a <SDMMC_GetResponse>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	210c      	movs	r1, #12
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fb75 	bl	8004b2a <SDMMC_GetResponse>
 8004440:	4602      	mov	r2, r0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2104      	movs	r1, #4
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fb6c 	bl	8004b2a <SDMMC_GetResponse>
 8004452:	4603      	mov	r3, r0
 8004454:	0d1a      	lsrs	r2, r3, #20
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800445a:	f107 0310 	add.w	r3, r7, #16
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fce3 	bl	8003e2c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	041b      	lsls	r3, r3, #16
 8004470:	f04f 0400 	mov.w	r4, #0
 8004474:	461a      	mov	r2, r3
 8004476:	4623      	mov	r3, r4
 8004478:	4608      	mov	r0, r1
 800447a:	f000 fc6f 	bl	8004d5c <SDMMC_CmdSelDesel>
 800447e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <SD_InitCard+0x16c>
  {
    return errorstate;
 8004486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004488:	e00e      	b.n	80044a8 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681d      	ldr	r5, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	466c      	mov	r4, sp
 8004492:	f103 0210 	add.w	r2, r3, #16
 8004496:	ca07      	ldmia	r2, {r0, r1, r2}
 8004498:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800449c:	3304      	adds	r3, #4
 800449e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 faa5 	bl	80049f0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3740      	adds	r7, #64	; 0x40
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bdb0      	pop	{r4, r5, r7, pc}

080044b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fc6a 	bl	8004da6 <SDMMC_CmdGoIdleState>
 80044d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <SD_PowerON+0x2e>
  {
    return errorstate;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	e08c      	b.n	80045f8 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fc7f 	bl	8004de6 <SDMMC_CmdOperCond>
 80044e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d03d      	beq.n	800456c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80044f6:	e032      	b.n	800455e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	60ba      	str	r2, [r7, #8]
 80044fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004502:	4293      	cmp	r3, r2
 8004504:	d102      	bne.n	800450c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800450a:	e075      	b.n	80045f8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2100      	movs	r1, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fc88 	bl	8004e28 <SDMMC_CmdAppCommand>
 8004518:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004520:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004524:	e068      	b.n	80045f8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fc9f 	bl	8004e70 <SDMMC_CmdAppOperCommand>
 8004532:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800453a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800453e:	e05b      	b.n	80045f8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 faef 	bl	8004b2a <SDMMC_GetResponse>
 800454c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	0fdb      	lsrs	r3, r3, #31
 8004552:	2b01      	cmp	r3, #1
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0c9      	beq.n	80044f8 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
 800456a:	e044      	b.n	80045f6 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8004572:	e031      	b.n	80045d8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	60ba      	str	r2, [r7, #8]
 800457a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800457e:	4293      	cmp	r3, r2
 8004580:	d102      	bne.n	8004588 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004586:	e037      	b.n	80045f8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fc4a 	bl	8004e28 <SDMMC_CmdAppCommand>
 8004594:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <SD_PowerON+0xf0>
      {
        return errorstate;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	e02b      	b.n	80045f8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fc61 	bl	8004e70 <SDMMC_CmdAppOperCommand>
 80045ae:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <SD_PowerON+0x10a>
      {
        return errorstate;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	e01e      	b.n	80045f8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fab2 	bl	8004b2a <SDMMC_GetResponse>
 80045c6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	0fdb      	lsrs	r3, r3, #31
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0ca      	beq.n	8004574 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
 80045ee:	e002      	b.n	80045f6 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8004614:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004618:	e018      	b.n	800464c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004622:	041b      	lsls	r3, r3, #16
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 fcac 	bl	8004f84 <SDMMC_CmdSendStatus>
 800462c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <SD_SendStatus+0x38>
  {
    return errorstate;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	e009      	b.n	800464c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fa73 	bl	8004b2a <SDMMC_GetResponse>
 8004644:	4602      	mov	r2, r0
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e025      	b.n	80046b4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7fd f85f 	bl	8001740 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	4619      	mov	r1, r3
 8004694:	4610      	mov	r0, r2
 8004696:	f000 f881 	bl	800479c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	f000 f8eb 	bl	8004880 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10a      	bne.n	80046e8 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f80c 	bl	80046f0 <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	615a      	str	r2, [r3, #20]
  }
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_SDRAM_WriteProtection_Disable>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_WriteProtection_Disable(SDRAM_HandleTypeDef *hsdram)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d101      	bne.n	800471c <HAL_SDRAM_WriteProtection_Disable+0x18>
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
 800471a:	e010      	b.n	800473e <HAL_SDRAM_WriteProtection_Disable+0x3a>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Disable write protection */
  FMC_SDRAM_WriteProtection_Disable(hsdram->Instance, hsdram->Init.SDBank);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 f926 	bl	8004980 <FMC_SDRAM_WriteProtection_Disable>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d101      	bne.n	8004762 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	e018      	b.n	8004794 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f91a 	bl	80049ac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d104      	bne.n	800478a <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2205      	movs	r2, #5
 8004784:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004788:	e003      	b.n	8004792 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d027      	beq.n	8004806 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4b2f      	ldr	r3, [pc, #188]	; (800487c <FMC_SDRAM_Init+0xe0>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047cc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80047d2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80047d8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80047de:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80047e4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80047ea:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80047f0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80047f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e032      	b.n	800486c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004812:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800481c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004822:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <FMC_SDRAM_Init+0xe0>)
 8004834:	4013      	ands	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004840:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8004846:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800484c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8004852:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8004858:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	4313      	orrs	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	ffff8000 	.word	0xffff8000

08004880 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d02e      	beq.n	80048f8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048a6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80048b6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	3b01      	subs	r3, #1
 80048be:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80048c0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80048ca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80048d4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	3b01      	subs	r3, #1
 80048dc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80048de:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80048e8:	4313      	orrs	r3, r2
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	e039      	b.n	800496c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <FMC_SDRAM_Timing_Init+0xfc>)
 8004902:	4013      	ands	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	3b01      	subs	r3, #1
 800490c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	3b01      	subs	r3, #1
 8004914:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004916:	4313      	orrs	r3, r2
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800492a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	3b01      	subs	r3, #1
 8004938:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800493a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	3b01      	subs	r3, #1
 8004942:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004944:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	3b01      	subs	r3, #1
 800494c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800494e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	3b01      	subs	r3, #1
 8004956:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004958:	4313      	orrs	r3, r2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	ff0f0fff 	.word	0xff0f0fff

08004980 <FMC_SDRAM_WriteProtection_Disable>:
  * @brief  Disables dynamically FMC_SDRAM write protection.
  * @param  hsdram FMC_SDRAM handle
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_WriteProtection_Disable(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Disable write protection */
  Device->SDCR[Bank] &= ~FMC_SDRAM_WRITE_PROTECTION_ENABLE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004992:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80049c4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80049ce:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80049f0:	b084      	sub	sp, #16
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	f107 001c 	add.w	r0, r7, #28
 80049fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004a06:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004a08:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004a0a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004a0e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004a12:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004a16:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004a1a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <SDMMC_Init+0x54>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	b004      	add	sp, #16
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	ffff8100 	.word	0xffff8100

08004a48 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2203      	movs	r2, #3
 8004a90:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0303 	and.w	r3, r3, #3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ada:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004ae0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004ae6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <SDMMC_SendCommand+0x50>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	fffff000 	.word	0xfffff000

08004b10 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	b2db      	uxtb	r3, r3
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3314      	adds	r3, #20
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	4413      	add	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
}  
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b7a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004b80:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004b86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0

}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004bbe:	2310      	movs	r3, #16
 8004bc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bc2:	2340      	movs	r3, #64	; 0x40
 8004bc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bce:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bd0:	f107 0308 	add.w	r3, r7, #8
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff ff70 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	2110      	movs	r1, #16
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa1c 	bl	8005020 <SDMMC_GetCmdResp1>
 8004be8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bea:	69fb      	ldr	r3, [r7, #28]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004c06:	2311      	movs	r3, #17
 8004c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c0a:	2340      	movs	r3, #64	; 0x40
 8004c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c16:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ff4c 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	2111      	movs	r1, #17
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9f8 	bl	8005020 <SDMMC_GetCmdResp1>
 8004c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c32:	69fb      	ldr	r3, [r7, #28]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004c4e:	2312      	movs	r3, #18
 8004c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c52:	2340      	movs	r3, #64	; 0x40
 8004c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c5e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c60:	f107 0308 	add.w	r3, r7, #8
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff ff28 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	2112      	movs	r1, #18
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9d4 	bl	8005020 <SDMMC_GetCmdResp1>
 8004c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004c96:	2318      	movs	r3, #24
 8004c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c9a:	2340      	movs	r3, #64	; 0x40
 8004c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ca8:	f107 0308 	add.w	r3, r7, #8
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff ff04 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb8:	2118      	movs	r1, #24
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9b0 	bl	8005020 <SDMMC_GetCmdResp1>
 8004cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004cde:	2319      	movs	r3, #25
 8004ce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ce2:	2340      	movs	r3, #64	; 0x40
 8004ce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cee:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cf0:	f107 0308 	add.w	r3, r7, #8
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff fee0 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d00:	2119      	movs	r1, #25
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f98c 	bl	8005020 <SDMMC_GetCmdResp1>
 8004d08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004d24:	230c      	movs	r3, #12
 8004d26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d28:	2340      	movs	r3, #64	; 0x40
 8004d2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d34:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff febd 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <SDMMC_CmdStopTransfer+0x44>)
 8004d44:	210c      	movs	r1, #12
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f96a 	bl	8005020 <SDMMC_GetCmdResp1>
 8004d4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	05f5e100 	.word	0x05f5e100

08004d5c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	; 0x28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004d70:	2307      	movs	r3, #7
 8004d72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d74:	2340      	movs	r3, #64	; 0x40
 8004d76:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d80:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d82:	f107 0310 	add.w	r3, r7, #16
 8004d86:	4619      	mov	r1, r3
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff fe97 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	2107      	movs	r1, #7
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f943 	bl	8005020 <SDMMC_GetCmdResp1>
 8004d9a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3728      	adds	r7, #40	; 0x28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b088      	sub	sp, #32
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dc6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dc8:	f107 0308 	add.w	r3, r7, #8
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fe74 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8f9 	bl	8004fcc <SDMMC_GetCmdError>
 8004dda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b088      	sub	sp, #32
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004df2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004df6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004df8:	2308      	movs	r3, #8
 8004dfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e08:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e0a:	f107 0308 	add.w	r3, r7, #8
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fe53 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 faca 	bl	80053b0 <SDMMC_GetCmdResp7>
 8004e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004e3a:	2337      	movs	r3, #55	; 0x37
 8004e3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e3e:	2340      	movs	r3, #64	; 0x40
 8004e40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e4a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fe32 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5c:	2137      	movs	r1, #55	; 0x37
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8de 	bl	8005020 <SDMMC_GetCmdResp1>
 8004e64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e66:	69fb      	ldr	r3, [r7, #28]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <SDMMC_CmdAppOperCommand+0x48>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004e86:	2329      	movs	r3, #41	; 0x29
 8004e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e8a:	2340      	movs	r3, #64	; 0x40
 8004e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e96:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e98:	f107 0308 	add.w	r3, r7, #8
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fe0c 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f9e1 	bl	800526c <SDMMC_GetCmdResp3>
 8004eaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eac:	69fb      	ldr	r3, [r7, #28]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	80100000 	.word	0x80100000

08004ebc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004ed0:	23c0      	movs	r3, #192	; 0xc0
 8004ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004edc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff fde9 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f97e 	bl	80051ec <SDMMC_GetCmdResp2>
 8004ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f0e:	2309      	movs	r3, #9
 8004f10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004f12:	23c0      	movs	r3, #192	; 0xc0
 8004f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f1e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f20:	f107 0308 	add.w	r3, r7, #8
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fdc8 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f95d 	bl	80051ec <SDMMC_GetCmdResp2>
 8004f32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f34:	69fb      	ldr	r3, [r7, #28]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b088      	sub	sp, #32
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004f50:	2303      	movs	r3, #3
 8004f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f54:	2340      	movs	r3, #64	; 0x40
 8004f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f60:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f62:	f107 0308 	add.w	r3, r7, #8
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fda7 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	2103      	movs	r1, #3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f9ae 	bl	80052d4 <SDMMC_GetCmdResp6>
 8004f78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004f96:	230d      	movs	r3, #13
 8004f98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fa8:	f107 0308 	add.w	r3, r7, #8
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fd84 	bl	8004abc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb8:	210d      	movs	r1, #13
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f830 	bl	8005020 <SDMMC_GetCmdResp1>
 8004fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004fcc:	b490      	push	{r4, r7}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <SDMMC_GetCmdError+0x4c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a10      	ldr	r2, [pc, #64]	; (800501c <SDMMC_GetCmdError+0x50>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	0a5b      	lsrs	r3, r3, #9
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8004fe8:	4623      	mov	r3, r4
 8004fea:	1e5c      	subs	r4, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ff4:	e00a      	b.n	800500c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f2      	beq.n	8004fe8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bc90      	pop	{r4, r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000004 	.word	0x20000004
 800501c:	10624dd3 	.word	0x10624dd3

08005020 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	460b      	mov	r3, r1
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800502e:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <SDMMC_GetCmdResp1+0x1c0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6c      	ldr	r2, [pc, #432]	; (80051e4 <SDMMC_GetCmdResp1+0x1c4>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	0a5b      	lsrs	r3, r3, #9
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005040:	4623      	mov	r3, r4
 8005042:	1e5c      	subs	r4, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800504c:	e0c3      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f2      	beq.n	8005040 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2204      	movs	r2, #4
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800506c:	2304      	movs	r3, #4
 800506e:	e0b2      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005082:	2301      	movs	r3, #1
 8005084:	e0a7      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff fd42 	bl	8004b10 <SDMMC_GetCommandResponse>
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	7afb      	ldrb	r3, [r7, #11]
 8005092:	4293      	cmp	r3, r2
 8005094:	d001      	beq.n	800509a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005096:	2301      	movs	r3, #1
 8005098:	e09d      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80050a2:	2100      	movs	r1, #0
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff fd40 	bl	8004b2a <SDMMC_GetResponse>
 80050aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4b4e      	ldr	r3, [pc, #312]	; (80051e8 <SDMMC_GetCmdResp1+0x1c8>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	e08d      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da02      	bge.n	80050c6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80050c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050c4:	e087      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80050d0:	2340      	movs	r3, #64	; 0x40
 80050d2:	e080      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	e079      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80050ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050f0:	e071      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80050fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005100:	e069      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800510c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005110:	e061      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800511c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005120:	e059      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800512c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005130:	e051      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800513c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005140:	e049      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800514c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005150:	e041      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800515c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005160:	e039      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800516c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005170:	e031      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800517c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005180:	e029      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800518c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005190:	e021      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800519c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80051a0:	e019      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80051ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051b0:	e011      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80051bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051c0:	e009      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80051cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80051d0:	e001      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80051d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd90      	pop	{r4, r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000004 	.word	0x20000004
 80051e4:	10624dd3 	.word	0x10624dd3
 80051e8:	fdffe008 	.word	0xfdffe008

080051ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80051ec:	b490      	push	{r4, r7}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80051f4:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <SDMMC_GetCmdResp2+0x78>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <SDMMC_GetCmdResp2+0x7c>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	0a5b      	lsrs	r3, r3, #9
 8005200:	f241 3288 	movw	r2, #5000	; 0x1388
 8005204:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005208:	4623      	mov	r3, r4
 800520a:	1e5c      	subs	r4, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005214:	e020      	b.n	8005258 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f2      	beq.n	8005208 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2204      	movs	r2, #4
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005234:	2304      	movs	r3, #4
 8005236:	e00f      	b.n	8005258 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800524a:	2301      	movs	r3, #1
 800524c:	e004      	b.n	8005258 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bc90      	pop	{r4, r7}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000004 	.word	0x20000004
 8005268:	10624dd3 	.word	0x10624dd3

0800526c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800526c:	b490      	push	{r4, r7}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005274:	4b15      	ldr	r3, [pc, #84]	; (80052cc <SDMMC_GetCmdResp3+0x60>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <SDMMC_GetCmdResp3+0x64>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	0a5b      	lsrs	r3, r3, #9
 8005280:	f241 3288 	movw	r2, #5000	; 0x1388
 8005284:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005288:	4623      	mov	r3, r4
 800528a:	1e5c      	subs	r4, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005290:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005294:	e015      	b.n	80052c2 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f2      	beq.n	8005288 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2204      	movs	r2, #4
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052b4:	2304      	movs	r3, #4
 80052b6:	e004      	b.n	80052c2 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80052be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc90      	pop	{r4, r7}
 80052ca:	4770      	bx	lr
 80052cc:	20000004 	.word	0x20000004
 80052d0:	10624dd3 	.word	0x10624dd3

080052d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	460b      	mov	r3, r1
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80052e2:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <SDMMC_GetCmdResp6+0xd4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a31      	ldr	r2, [pc, #196]	; (80053ac <SDMMC_GetCmdResp6+0xd8>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	0a5b      	lsrs	r3, r3, #9
 80052ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80052f6:	4623      	mov	r3, r4
 80052f8:	1e5c      	subs	r4, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005302:	e04c      	b.n	800539e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f2      	beq.n	80052f6 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2204      	movs	r2, #4
 8005320:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005322:	2304      	movs	r3, #4
 8005324:	e03b      	b.n	800539e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005338:	2301      	movs	r3, #1
 800533a:	e030      	b.n	800539e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7ff fbe7 	bl	8004b10 <SDMMC_GetCommandResponse>
 8005342:	4603      	mov	r3, r0
 8005344:	461a      	mov	r2, r3
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	4293      	cmp	r3, r2
 800534a:	d001      	beq.n	8005350 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800534c:	2301      	movs	r3, #1
 800534e:	e026      	b.n	800539e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005356:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005358:	2100      	movs	r1, #0
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff fbe5 	bl	8004b2a <SDMMC_GetResponse>
 8005360:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005376:	2300      	movs	r3, #0
 8005378:	e011      	b.n	800539e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005388:	e009      	b.n	800539e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005398:	e001      	b.n	800539e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800539a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd90      	pop	{r4, r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000004 	.word	0x20000004
 80053ac:	10624dd3 	.word	0x10624dd3

080053b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80053b0:	b490      	push	{r4, r7}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80053b8:	4b18      	ldr	r3, [pc, #96]	; (800541c <SDMMC_GetCmdResp7+0x6c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <SDMMC_GetCmdResp7+0x70>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	0a5b      	lsrs	r3, r3, #9
 80053c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80053cc:	4623      	mov	r3, r4
 80053ce:	1e5c      	subs	r4, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053d8:	e01a      	b.n	8005410 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f2      	beq.n	80053cc <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2240      	movs	r2, #64	; 0x40
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053f8:	2304      	movs	r3, #4
 80053fa:	e009      	b.n	8005410 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2240      	movs	r2, #64	; 0x40
 800540c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800540e:	2300      	movs	r3, #0
  
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bc90      	pop	{r4, r7}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000004 	.word	0x20000004
 8005420:	10624dd3 	.word	0x10624dd3

08005424 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005428:	4904      	ldr	r1, [pc, #16]	; (800543c <MX_FATFS_Init+0x18>)
 800542a:	4805      	ldr	r0, [pc, #20]	; (8005440 <MX_FATFS_Init+0x1c>)
 800542c:	f002 fc74 	bl	8007d18 <FATFS_LinkDriver>
 8005430:	4603      	mov	r3, r0
 8005432:	461a      	mov	r2, r3
 8005434:	4b03      	ldr	r3, [pc, #12]	; (8005444 <MX_FATFS_Init+0x20>)
 8005436:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005438:	bf00      	nop
 800543a:	bd80      	pop	{r7, pc}
 800543c:	200002f4 	.word	0x200002f4
 8005440:	08007e1c 	.word	0x08007e1c
 8005444:	200002f0 	.word	0x200002f0

08005448 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800544c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800544e:	4618      	mov	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005462:	f000 f86b 	bl	800553c <BSP_SD_IsDetected>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800546c:	2302      	movs	r3, #2
 800546e:	e005      	b.n	800547c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005470:	4804      	ldr	r0, [pc, #16]	; (8005484 <BSP_SD_Init+0x2c>)
 8005472:	f7fe f94f 	bl	8003714 <HAL_SD_Init>
 8005476:	4603      	mov	r3, r0
 8005478:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800547a:	79fb      	ldrb	r3, [r7, #7]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	200000f0 	.word	0x200000f0

08005488 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	4806      	ldr	r0, [pc, #24]	; (80054c0 <BSP_SD_ReadBlocks+0x38>)
 80054a6:	f7fe f9c4 	bl	8003832 <HAL_SD_ReadBlocks>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	200000f0 	.word	0x200000f0

080054c4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	4806      	ldr	r0, [pc, #24]	; (80054fc <BSP_SD_WriteBlocks+0x38>)
 80054e2:	f7fe fb3c 	bl	8003b5e <HAL_SD_WriteBlocks>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	200000f0 	.word	0x200000f0

08005500 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005504:	4805      	ldr	r0, [pc, #20]	; (800551c <BSP_SD_GetCardState+0x1c>)
 8005506:	f7fe fee5 	bl	80042d4 <HAL_SD_GetCardState>
 800550a:	4603      	mov	r3, r0
 800550c:	2b04      	cmp	r3, #4
 800550e:	bf14      	ite	ne
 8005510:	2301      	movne	r3, #1
 8005512:	2300      	moveq	r3, #0
 8005514:	b2db      	uxtb	r3, r3
}
 8005516:	4618      	mov	r0, r3
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200000f0 	.word	0x200000f0

08005520 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4803      	ldr	r0, [pc, #12]	; (8005538 <BSP_SD_GetCardInfo+0x18>)
 800552c:	f7fe fea6 	bl	800427c <HAL_SD_GetCardInfo>
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	200000f0 	.word	0x200000f0

0800553c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005542:	2301      	movs	r3, #1
 8005544:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8005546:	f000 f80b 	bl	8005560 <BSP_PlatformIsDetected>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005550:	2300      	movs	r3, #0
 8005552:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	b2db      	uxtb	r3, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005566:	2301      	movs	r3, #1
 8005568:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800556a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800556e:	4806      	ldr	r0, [pc, #24]	; (8005588 <BSP_PlatformIsDetected+0x28>)
 8005570:	f7fd f846 	bl	8002600 <HAL_GPIO_ReadPin>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800557a:	2300      	movs	r3, #0
 800557c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800557e:	79fb      	ldrb	r3, [r7, #7]
}  
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40020800 	.word	0x40020800

0800558c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005596:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <SD_CheckStatus+0x38>)
 8005598:	2201      	movs	r2, #1
 800559a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800559c:	f7ff ffb0 	bl	8005500 <BSP_SD_GetCardState>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d107      	bne.n	80055b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <SD_CheckStatus+0x38>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <SD_CheckStatus+0x38>)
 80055b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80055b6:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <SD_CheckStatus+0x38>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b2db      	uxtb	r3, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	2000000d 	.word	0x2000000d

080055c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <SD_initialize+0x38>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80055d8:	f7ff ff3e 	bl	8005458 <BSP_SD_Init>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff ffd1 	bl	800558c <SD_CheckStatus>
 80055ea:	4603      	mov	r3, r0
 80055ec:	461a      	mov	r2, r3
 80055ee:	4b04      	ldr	r3, [pc, #16]	; (8005600 <SD_initialize+0x38>)
 80055f0:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80055f2:	4b03      	ldr	r3, [pc, #12]	; (8005600 <SD_initialize+0x38>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	b2db      	uxtb	r3, r3
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	2000000d 	.word	0x2000000d

08005604 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff ffbb 	bl	800558c <SD_CheckStatus>
 8005616:	4603      	mov	r3, r0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005634:	f04f 33ff 	mov.w	r3, #4294967295
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	68b8      	ldr	r0, [r7, #8]
 800563e:	f7ff ff23 	bl	8005488 <BSP_SD_ReadBlocks>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d107      	bne.n	8005658 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005648:	bf00      	nop
 800564a:	f7ff ff59 	bl	8005500 <BSP_SD_GetCardState>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1fa      	bne.n	800564a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	4603      	mov	r3, r0
 8005670:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	68b8      	ldr	r0, [r7, #8]
 8005680:	f7ff ff20 	bl	80054c4 <BSP_SD_WriteBlocks>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800568a:	bf00      	nop
 800568c:	f7ff ff38 	bl	8005500 <BSP_SD_GetCardState>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1fa      	bne.n	800568c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08c      	sub	sp, #48	; 0x30
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	603a      	str	r2, [r7, #0]
 80056ae:	71fb      	strb	r3, [r7, #7]
 80056b0:	460b      	mov	r3, r1
 80056b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80056ba:	4b25      	ldr	r3, [pc, #148]	; (8005750 <SD_ioctl+0xac>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <SD_ioctl+0x28>
 80056c8:	2303      	movs	r3, #3
 80056ca:	e03c      	b.n	8005746 <SD_ioctl+0xa2>

  switch (cmd)
 80056cc:	79bb      	ldrb	r3, [r7, #6]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d834      	bhi.n	800573c <SD_ioctl+0x98>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <SD_ioctl+0x34>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056f1 	.word	0x080056f1
 80056e0:	08005709 	.word	0x08005709
 80056e4:	08005723 	.word	0x08005723
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056ee:	e028      	b.n	8005742 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80056f0:	f107 030c 	add.w	r3, r7, #12
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff ff13 	bl	8005520 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80056fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005706:	e01c      	b.n	8005742 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005708:	f107 030c 	add.w	r3, r7, #12
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ff07 	bl	8005520 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	b29a      	uxth	r2, r3
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005720:	e00f      	b.n	8005742 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005722:	f107 030c 	add.w	r3, r7, #12
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fefa 	bl	8005520 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	0a5a      	lsrs	r2, r3, #9
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800573a:	e002      	b.n	8005742 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800573c:	2304      	movs	r3, #4
 800573e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005746:	4618      	mov	r0, r3
 8005748:	3730      	adds	r7, #48	; 0x30
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	2000000d 	.word	0x2000000d

08005754 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	4a08      	ldr	r2, [pc, #32]	; (8005784 <disk_status+0x30>)
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	79fa      	ldrb	r2, [r7, #7]
 800576c:	4905      	ldr	r1, [pc, #20]	; (8005784 <disk_status+0x30>)
 800576e:	440a      	add	r2, r1
 8005770:	7a12      	ldrb	r2, [r2, #8]
 8005772:	4610      	mov	r0, r2
 8005774:	4798      	blx	r3
 8005776:	4603      	mov	r3, r0
 8005778:	73fb      	strb	r3, [r7, #15]
  return stat;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000074 	.word	0x20000074

08005788 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	4a0d      	ldr	r2, [pc, #52]	; (80057d0 <disk_initialize+0x48>)
 800579a:	5cd3      	ldrb	r3, [r2, r3]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d111      	bne.n	80057c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <disk_initialize+0x48>)
 80057a4:	2101      	movs	r1, #1
 80057a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <disk_initialize+0x48>)
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	79fa      	ldrb	r2, [r7, #7]
 80057b6:	4906      	ldr	r1, [pc, #24]	; (80057d0 <disk_initialize+0x48>)
 80057b8:	440a      	add	r2, r1
 80057ba:	7a12      	ldrb	r2, [r2, #8]
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000074 	.word	0x20000074

080057d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4603      	mov	r3, r0
 80057e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <disk_read+0x3c>)
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	689c      	ldr	r4, [r3, #8]
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	4a07      	ldr	r2, [pc, #28]	; (8005810 <disk_read+0x3c>)
 80057f4:	4413      	add	r3, r2
 80057f6:	7a18      	ldrb	r0, [r3, #8]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	47a0      	blx	r4
 8005800:	4603      	mov	r3, r0
 8005802:	75fb      	strb	r3, [r7, #23]
  return res;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
}
 8005806:	4618      	mov	r0, r3
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	bd90      	pop	{r4, r7, pc}
 800580e:	bf00      	nop
 8005810:	20000074 	.word	0x20000074

08005814 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <disk_write+0x3c>)
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	68dc      	ldr	r4, [r3, #12]
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	4a07      	ldr	r2, [pc, #28]	; (8005850 <disk_write+0x3c>)
 8005834:	4413      	add	r3, r2
 8005836:	7a18      	ldrb	r0, [r3, #8]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	47a0      	blx	r4
 8005840:	4603      	mov	r3, r0
 8005842:	75fb      	strb	r3, [r7, #23]
  return res;
 8005844:	7dfb      	ldrb	r3, [r7, #23]
}
 8005846:	4618      	mov	r0, r3
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd90      	pop	{r4, r7, pc}
 800584e:	bf00      	nop
 8005850:	20000074 	.word	0x20000074

08005854 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	603a      	str	r2, [r7, #0]
 800585e:	71fb      	strb	r3, [r7, #7]
 8005860:	460b      	mov	r3, r1
 8005862:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	4a09      	ldr	r2, [pc, #36]	; (800588c <disk_ioctl+0x38>)
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	79fa      	ldrb	r2, [r7, #7]
 8005872:	4906      	ldr	r1, [pc, #24]	; (800588c <disk_ioctl+0x38>)
 8005874:	440a      	add	r2, r1
 8005876:	7a10      	ldrb	r0, [r2, #8]
 8005878:	79b9      	ldrb	r1, [r7, #6]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	4798      	blx	r3
 800587e:	4603      	mov	r3, r0
 8005880:	73fb      	strb	r3, [r7, #15]
  return res;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20000074 	.word	0x20000074

08005890 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3301      	adds	r3, #1
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80058a0:	89fb      	ldrh	r3, [r7, #14]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	b21a      	sxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	b21b      	sxth	r3, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	b21b      	sxth	r3, r3
 80058b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80058b2:	89fb      	ldrh	r3, [r7, #14]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3303      	adds	r3, #3
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	3202      	adds	r2, #2
 80058d8:	7812      	ldrb	r2, [r2, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	3201      	adds	r2, #1
 80058e6:	7812      	ldrb	r2, [r2, #0]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80058f8:	68fb      	ldr	r3, [r7, #12]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	887a      	ldrh	r2, [r7, #2]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	887b      	ldrh	r3, [r7, #2]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	607a      	str	r2, [r7, #4]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	0a1b      	lsrs	r3, r3, #8
 800597a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	1c53      	adds	r3, r2, #1
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1c59      	adds	r1, r3, #1
 80059b8:	6179      	str	r1, [r7, #20]
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f1      	bne.n	80059ae <mem_cpy+0x1a>
	}
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80059d6:	b480      	push	{r7}
 80059d8:	b087      	sub	sp, #28
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	617a      	str	r2, [r7, #20]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	607b      	str	r3, [r7, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f3      	bne.n	80059e6 <mem_set+0x10>
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005a0a:	b480      	push	{r7}
 8005a0c:	b089      	sub	sp, #36	; 0x24
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	61fa      	str	r2, [r7, #28]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	61ba      	str	r2, [r7, #24]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	1acb      	subs	r3, r1, r3
 8005a36:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	607b      	str	r3, [r7, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <mem_cmp+0x40>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0eb      	beq.n	8005a22 <mem_cmp+0x18>

	return r;
 8005a4a:	697b      	ldr	r3, [r7, #20]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3724      	adds	r7, #36	; 0x24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a62:	e002      	b.n	8005a6a <chk_chr+0x12>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3301      	adds	r3, #1
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <chk_chr+0x26>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d1f2      	bne.n	8005a64 <chk_chr+0xc>
	return *str;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	781b      	ldrb	r3, [r3, #0]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e029      	b.n	8005af8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005aa4:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <chk_lock+0xb4>)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	4413      	add	r3, r2
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01d      	beq.n	8005aee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ab2:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <chk_lock+0xb4>)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	4413      	add	r3, r2
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d116      	bne.n	8005af2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <chk_lock+0xb4>)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	4413      	add	r3, r2
 8005acc:	3304      	adds	r3, #4
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d10c      	bne.n	8005af2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ad8:	4a1a      	ldr	r2, [pc, #104]	; (8005b44 <chk_lock+0xb4>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4413      	add	r3, r2
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d102      	bne.n	8005af2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005aec:	e007      	b.n	8005afe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005aee:	2301      	movs	r3, #1
 8005af0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3301      	adds	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d9d2      	bls.n	8005aa4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d109      	bne.n	8005b18 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <chk_lock+0x80>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d101      	bne.n	8005b14 <chk_lock+0x84>
 8005b10:	2300      	movs	r3, #0
 8005b12:	e010      	b.n	8005b36 <chk_lock+0xa6>
 8005b14:	2312      	movs	r3, #18
 8005b16:	e00e      	b.n	8005b36 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d108      	bne.n	8005b30 <chk_lock+0xa0>
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <chk_lock+0xb4>)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	4413      	add	r3, r2
 8005b26:	330c      	adds	r3, #12
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2e:	d101      	bne.n	8005b34 <chk_lock+0xa4>
 8005b30:	2310      	movs	r3, #16
 8005b32:	e000      	b.n	8005b36 <chk_lock+0xa6>
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000054 	.word	0x20000054

08005b48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	e002      	b.n	8005b5a <enq_lock+0x12>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3301      	adds	r3, #1
 8005b58:	607b      	str	r3, [r7, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d806      	bhi.n	8005b6e <enq_lock+0x26>
 8005b60:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <enq_lock+0x40>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	4413      	add	r3, r2
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f2      	bne.n	8005b54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	bf14      	ite	ne
 8005b74:	2301      	movne	r3, #1
 8005b76:	2300      	moveq	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	20000054 	.word	0x20000054

08005b8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e01f      	b.n	8005bdc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b9c:	4a41      	ldr	r2, [pc, #260]	; (8005ca4 <inc_lock+0x118>)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	4413      	add	r3, r2
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d113      	bne.n	8005bd6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005bae:	4a3d      	ldr	r2, [pc, #244]	; (8005ca4 <inc_lock+0x118>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	4413      	add	r3, r2
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d109      	bne.n	8005bd6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005bc2:	4a38      	ldr	r2, [pc, #224]	; (8005ca4 <inc_lock+0x118>)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	4413      	add	r3, r2
 8005bca:	3308      	adds	r3, #8
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d006      	beq.n	8005be4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d9dc      	bls.n	8005b9c <inc_lock+0x10>
 8005be2:	e000      	b.n	8005be6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005be4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d132      	bne.n	8005c52 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	e002      	b.n	8005bf8 <inc_lock+0x6c>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d806      	bhi.n	8005c0c <inc_lock+0x80>
 8005bfe:	4a29      	ldr	r2, [pc, #164]	; (8005ca4 <inc_lock+0x118>)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	4413      	add	r3, r2
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f2      	bne.n	8005bf2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d101      	bne.n	8005c16 <inc_lock+0x8a>
 8005c12:	2300      	movs	r3, #0
 8005c14:	e040      	b.n	8005c98 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4922      	ldr	r1, [pc, #136]	; (8005ca4 <inc_lock+0x118>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	440b      	add	r3, r1
 8005c22:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	491e      	ldr	r1, [pc, #120]	; (8005ca4 <inc_lock+0x118>)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	440b      	add	r3, r1
 8005c30:	3304      	adds	r3, #4
 8005c32:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695a      	ldr	r2, [r3, #20]
 8005c38:	491a      	ldr	r1, [pc, #104]	; (8005ca4 <inc_lock+0x118>)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	440b      	add	r3, r1
 8005c40:	3308      	adds	r3, #8
 8005c42:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c44:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <inc_lock+0x118>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	4413      	add	r3, r2
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	2200      	movs	r2, #0
 8005c50:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d009      	beq.n	8005c6c <inc_lock+0xe0>
 8005c58:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <inc_lock+0x118>)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	4413      	add	r3, r2
 8005c60:	330c      	adds	r3, #12
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <inc_lock+0xe0>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e015      	b.n	8005c98 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d108      	bne.n	8005c84 <inc_lock+0xf8>
 8005c72:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <inc_lock+0x118>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	4413      	add	r3, r2
 8005c7a:	330c      	adds	r3, #12
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	e001      	b.n	8005c88 <inc_lock+0xfc>
 8005c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c88:	4906      	ldr	r1, [pc, #24]	; (8005ca4 <inc_lock+0x118>)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	440b      	add	r3, r1
 8005c90:	330c      	adds	r3, #12
 8005c92:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	20000054 	.word	0x20000054

08005ca8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d825      	bhi.n	8005d08 <dec_lock+0x60>
		n = Files[i].ctr;
 8005cbc:	4a17      	ldr	r2, [pc, #92]	; (8005d1c <dec_lock+0x74>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	4413      	add	r3, r2
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005cca:	89fb      	ldrh	r3, [r7, #14]
 8005ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd0:	d101      	bne.n	8005cd6 <dec_lock+0x2e>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005cd6:	89fb      	ldrh	r3, [r7, #14]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <dec_lock+0x3a>
 8005cdc:	89fb      	ldrh	r3, [r7, #14]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005ce2:	4a0e      	ldr	r2, [pc, #56]	; (8005d1c <dec_lock+0x74>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	4413      	add	r3, r2
 8005cea:	330c      	adds	r3, #12
 8005cec:	89fa      	ldrh	r2, [r7, #14]
 8005cee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005cf0:	89fb      	ldrh	r3, [r7, #14]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d105      	bne.n	8005d02 <dec_lock+0x5a>
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <dec_lock+0x74>)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	4413      	add	r3, r2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	737b      	strb	r3, [r7, #13]
 8005d06:	e001      	b.n	8005d0c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d08:	2302      	movs	r3, #2
 8005d0a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d0c:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000054 	.word	0x20000054

08005d20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e010      	b.n	8005d50 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d2e:	4a0d      	ldr	r2, [pc, #52]	; (8005d64 <clear_lock+0x44>)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	4413      	add	r3, r2
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d105      	bne.n	8005d4a <clear_lock+0x2a>
 8005d3e:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <clear_lock+0x44>)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	4413      	add	r3, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d9eb      	bls.n	8005d2e <clear_lock+0xe>
	}
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000054 	.word	0x20000054

08005d68 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	78db      	ldrb	r3, [r3, #3]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d034      	beq.n	8005de6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	7858      	ldrb	r0, [r3, #1]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	f7ff fd40 	bl	8005814 <disk_write>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
 8005d9e:	e022      	b.n	8005de6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	1ad2      	subs	r2, r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d217      	bcs.n	8005de6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	789b      	ldrb	r3, [r3, #2]
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	e010      	b.n	8005de0 <sync_window+0x78>
					wsect += fs->fsize;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	7858      	ldrb	r0, [r3, #1]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	f7ff fd1d 	bl	8005814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d8eb      	bhi.n	8005dbe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d01b      	beq.n	8005e40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ffad 	bl	8005d68 <sync_window>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d113      	bne.n	8005e40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	7858      	ldrb	r0, [r3, #1]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e22:	2301      	movs	r3, #1
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	f7ff fcd5 	bl	80057d4 <disk_read>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ff87 	bl	8005d68 <sync_window>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d158      	bne.n	8005f16 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d148      	bne.n	8005efe <sync_fs+0xb2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	791b      	ldrb	r3, [r3, #4]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d144      	bne.n	8005efe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3330      	adds	r3, #48	; 0x30
 8005e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fda9 	bl	80059d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3330      	adds	r3, #48	; 0x30
 8005e88:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e8c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fd38 	bl	8005906 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3330      	adds	r3, #48	; 0x30
 8005e9a:	4921      	ldr	r1, [pc, #132]	; (8005f20 <sync_fs+0xd4>)
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fd4d 	bl	800593c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3330      	adds	r3, #48	; 0x30
 8005ea6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005eaa:	491e      	ldr	r1, [pc, #120]	; (8005f24 <sync_fs+0xd8>)
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fd45 	bl	800593c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3330      	adds	r3, #48	; 0x30
 8005eb6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	f7ff fd3b 	bl	800593c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3330      	adds	r3, #48	; 0x30
 8005eca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f7ff fd31 	bl	800593c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	7858      	ldrb	r0, [r3, #1]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f7ff fc8e 	bl	8005814 <disk_write>
			fs->fsi_flag = 0;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	2200      	movs	r2, #0
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fca4 	bl	8005854 <disk_ioctl>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <sync_fs+0xca>
 8005f12:	2301      	movs	r3, #1
 8005f14:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	41615252 	.word	0x41615252
 8005f24:	61417272 	.word	0x61417272

08005f28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	3b02      	subs	r3, #2
 8005f36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	3b02      	subs	r3, #2
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d301      	bcc.n	8005f48 <clust2sect+0x20>
 8005f44:	2300      	movs	r3, #0
 8005f46:	e008      	b.n	8005f5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	895b      	ldrh	r3, [r3, #10]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	fb03 f202 	mul.w	r2, r3, r2
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	4413      	add	r3, r2
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d904      	bls.n	8005f86 <get_fat+0x20>
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d302      	bcc.n	8005f8c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f86:	2301      	movs	r3, #1
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	e08c      	b.n	80060a6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d045      	beq.n	8006026 <get_fat+0xc0>
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d05d      	beq.n	800605a <get_fat+0xf4>
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d177      	bne.n	8006092 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	0a5b      	lsrs	r3, r3, #9
 8005fb8:	4413      	add	r3, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6938      	ldr	r0, [r7, #16]
 8005fbe:	f7ff ff17 	bl	8005df0 <move_window>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d167      	bne.n	8006098 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	60fa      	str	r2, [r7, #12]
 8005fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fda:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6a1a      	ldr	r2, [r3, #32]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	0a5b      	lsrs	r3, r3, #9
 8005fe4:	4413      	add	r3, r2
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6938      	ldr	r0, [r7, #16]
 8005fea:	f7ff ff01 	bl	8005df0 <move_window>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d153      	bne.n	800609c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	461a      	mov	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4313      	orrs	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <get_fat+0xb6>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	e002      	b.n	8006022 <get_fat+0xbc>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006022:	617b      	str	r3, [r7, #20]
			break;
 8006024:	e03f      	b.n	80060a6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6a1a      	ldr	r2, [r3, #32]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	0a1b      	lsrs	r3, r3, #8
 800602e:	4413      	add	r3, r2
 8006030:	4619      	mov	r1, r3
 8006032:	6938      	ldr	r0, [r7, #16]
 8006034:	f7ff fedc 	bl	8005df0 <move_window>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d130      	bne.n	80060a0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800604c:	4413      	add	r3, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fc1e 	bl	8005890 <ld_word>
 8006054:	4603      	mov	r3, r0
 8006056:	617b      	str	r3, [r7, #20]
			break;
 8006058:	e025      	b.n	80060a6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6a1a      	ldr	r2, [r3, #32]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	09db      	lsrs	r3, r3, #7
 8006062:	4413      	add	r3, r2
 8006064:	4619      	mov	r1, r3
 8006066:	6938      	ldr	r0, [r7, #16]
 8006068:	f7ff fec2 	bl	8005df0 <move_window>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d118      	bne.n	80060a4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006080:	4413      	add	r3, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fc1c 	bl	80058c0 <ld_dword>
 8006088:	4603      	mov	r3, r0
 800608a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800608e:	617b      	str	r3, [r7, #20]
			break;
 8006090:	e009      	b.n	80060a6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006092:	2301      	movs	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e006      	b.n	80060a6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006098:	bf00      	nop
 800609a:	e004      	b.n	80060a6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800609c:	bf00      	nop
 800609e:	e002      	b.n	80060a6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060a0:	bf00      	nop
 80060a2:	e000      	b.n	80060a6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060a4:	bf00      	nop
		}
	}

	return val;
 80060a6:	697b      	ldr	r3, [r7, #20]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b089      	sub	sp, #36	; 0x24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80060bc:	2302      	movs	r3, #2
 80060be:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	f240 80d6 	bls.w	8006274 <put_fat+0x1c4>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	f080 80d0 	bcs.w	8006274 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d073      	beq.n	80061c4 <put_fat+0x114>
 80060dc:	2b03      	cmp	r3, #3
 80060de:	f000 8091 	beq.w	8006204 <put_fat+0x154>
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	f040 80c6 	bne.w	8006274 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4413      	add	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1a      	ldr	r2, [r3, #32]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	0a5b      	lsrs	r3, r3, #9
 80060fe:	4413      	add	r3, r2
 8006100:	4619      	mov	r1, r3
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff fe74 	bl	8005df0 <move_window>
 8006108:	4603      	mov	r3, r0
 800610a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800610c:	7ffb      	ldrb	r3, [r7, #31]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f040 80a9 	bne.w	8006266 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	1c59      	adds	r1, r3, #1
 800611e:	61b9      	str	r1, [r7, #24]
 8006120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006124:	4413      	add	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00d      	beq.n	800614e <put_fat+0x9e>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	b25b      	sxtb	r3, r3
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	b25a      	sxtb	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	b25b      	sxtb	r3, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	b25b      	sxtb	r3, r3
 800614a:	b2db      	uxtb	r3, r3
 800614c:	e001      	b.n	8006152 <put_fat+0xa2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	0a5b      	lsrs	r3, r3, #9
 8006164:	4413      	add	r3, r2
 8006166:	4619      	mov	r1, r3
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fe41 	bl	8005df0 <move_window>
 800616e:	4603      	mov	r3, r0
 8006170:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006172:	7ffb      	ldrb	r3, [r7, #31]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d178      	bne.n	800626a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006184:	4413      	add	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <put_fat+0xea>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	091b      	lsrs	r3, r3, #4
 8006196:	b2db      	uxtb	r3, r3
 8006198:	e00e      	b.n	80061b8 <put_fat+0x108>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	b25b      	sxtb	r3, r3
 80061a0:	f023 030f 	bic.w	r3, r3, #15
 80061a4:	b25a      	sxtb	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	0a1b      	lsrs	r3, r3, #8
 80061aa:	b25b      	sxtb	r3, r3
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	b25b      	sxtb	r3, r3
 80061b2:	4313      	orrs	r3, r2
 80061b4:	b25b      	sxtb	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	70da      	strb	r2, [r3, #3]
			break;
 80061c2:	e057      	b.n	8006274 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	4413      	add	r3, r2
 80061ce:	4619      	mov	r1, r3
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff fe0d 	bl	8005df0 <move_window>
 80061d6:	4603      	mov	r3, r0
 80061d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061da:	7ffb      	ldrb	r3, [r7, #31]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d146      	bne.n	800626e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80061ee:	4413      	add	r3, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	b292      	uxth	r2, r2
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff fb85 	bl	8005906 <st_word>
			fs->wflag = 1;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	70da      	strb	r2, [r3, #3]
			break;
 8006202:	e037      	b.n	8006274 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	09db      	lsrs	r3, r3, #7
 800620c:	4413      	add	r3, r2
 800620e:	4619      	mov	r1, r3
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff fded 	bl	8005df0 <move_window>
 8006216:	4603      	mov	r3, r0
 8006218:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800621a:	7ffb      	ldrb	r3, [r7, #31]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d128      	bne.n	8006272 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006234:	4413      	add	r3, r2
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff fb42 	bl	80058c0 <ld_dword>
 800623c:	4603      	mov	r3, r0
 800623e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006242:	4323      	orrs	r3, r4
 8006244:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006254:	4413      	add	r3, r2
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fb6f 	bl	800593c <st_dword>
			fs->wflag = 1;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	70da      	strb	r2, [r3, #3]
			break;
 8006264:	e006      	b.n	8006274 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006266:	bf00      	nop
 8006268:	e004      	b.n	8006274 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800626a:	bf00      	nop
 800626c:	e002      	b.n	8006274 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006272:	bf00      	nop
		}
	}
	return res;
 8006274:	7ffb      	ldrb	r3, [r7, #31]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3724      	adds	r7, #36	; 0x24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}

0800627e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b088      	sub	sp, #32
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d904      	bls.n	80062a4 <remove_chain+0x26>
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d301      	bcc.n	80062a8 <remove_chain+0x2a>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e04b      	b.n	8006340 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00c      	beq.n	80062c8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	69b8      	ldr	r0, [r7, #24]
 80062b6:	f7ff fefb 	bl	80060b0 <put_fat>
 80062ba:	4603      	mov	r3, r0
 80062bc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80062be:	7ffb      	ldrb	r3, [r7, #31]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <remove_chain+0x4a>
 80062c4:	7ffb      	ldrb	r3, [r7, #31]
 80062c6:	e03b      	b.n	8006340 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff fe4b 	bl	8005f66 <get_fat>
 80062d0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d031      	beq.n	800633c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <remove_chain+0x64>
 80062de:	2302      	movs	r3, #2
 80062e0:	e02e      	b.n	8006340 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d101      	bne.n	80062ee <remove_chain+0x70>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e028      	b.n	8006340 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80062ee:	2200      	movs	r2, #0
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	69b8      	ldr	r0, [r7, #24]
 80062f4:	f7ff fedc 	bl	80060b0 <put_fat>
 80062f8:	4603      	mov	r3, r0
 80062fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80062fc:	7ffb      	ldrb	r3, [r7, #31]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <remove_chain+0x88>
 8006302:	7ffb      	ldrb	r3, [r7, #31]
 8006304:	e01c      	b.n	8006340 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	3b02      	subs	r3, #2
 8006310:	429a      	cmp	r2, r3
 8006312:	d20b      	bcs.n	800632c <remove_chain+0xae>
			fs->free_clst++;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	791b      	ldrb	r3, [r3, #4]
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	429a      	cmp	r2, r3
 8006338:	d3c6      	bcc.n	80062c8 <remove_chain+0x4a>
 800633a:	e000      	b.n	800633e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800633c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3720      	adds	r7, #32
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10d      	bne.n	800637a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <create_chain+0x2c>
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	429a      	cmp	r2, r3
 8006372:	d31b      	bcc.n	80063ac <create_chain+0x64>
 8006374:	2301      	movs	r3, #1
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e018      	b.n	80063ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff fdf2 	bl	8005f66 <get_fat>
 8006382:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d801      	bhi.n	800638e <create_chain+0x46>
 800638a:	2301      	movs	r3, #1
 800638c:	e070      	b.n	8006470 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d101      	bne.n	800639a <create_chain+0x52>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	e06a      	b.n	8006470 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d201      	bcs.n	80063a8 <create_chain+0x60>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	e063      	b.n	8006470 <create_chain+0x128>
		scl = clst;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	3301      	adds	r3, #1
 80063b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d307      	bcc.n	80063d0 <create_chain+0x88>
				ncl = 2;
 80063c0:	2302      	movs	r3, #2
 80063c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d901      	bls.n	80063d0 <create_chain+0x88>
 80063cc:	2300      	movs	r3, #0
 80063ce:	e04f      	b.n	8006470 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80063d0:	69f9      	ldr	r1, [r7, #28]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fdc7 	bl	8005f66 <get_fat>
 80063d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d003      	beq.n	80063ee <create_chain+0xa6>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d101      	bne.n	80063f2 <create_chain+0xaa>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	e03e      	b.n	8006470 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d1da      	bne.n	80063b0 <create_chain+0x68>
 80063fa:	2300      	movs	r3, #0
 80063fc:	e038      	b.n	8006470 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80063fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006400:	f04f 32ff 	mov.w	r2, #4294967295
 8006404:	69f9      	ldr	r1, [r7, #28]
 8006406:	6938      	ldr	r0, [r7, #16]
 8006408:	f7ff fe52 	bl	80060b0 <put_fat>
 800640c:	4603      	mov	r3, r0
 800640e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <create_chain+0xe2>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d006      	beq.n	800642a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6938      	ldr	r0, [r7, #16]
 8006422:	f7ff fe45 	bl	80060b0 <put_fat>
 8006426:	4603      	mov	r3, r0
 8006428:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d116      	bne.n	800645e <create_chain+0x116>
		fs->last_clst = ncl;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	3b02      	subs	r3, #2
 8006440:	429a      	cmp	r2, r3
 8006442:	d804      	bhi.n	800644e <create_chain+0x106>
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	1e5a      	subs	r2, r3, #1
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	791b      	ldrb	r3, [r3, #4]
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	711a      	strb	r2, [r3, #4]
 800645c:	e007      	b.n	800646e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d102      	bne.n	800646a <create_chain+0x122>
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	e000      	b.n	800646c <create_chain+0x124>
 800646a:	2301      	movs	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800646e:	69fb      	ldr	r3, [r7, #28]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	3304      	adds	r3, #4
 800648e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	0a5b      	lsrs	r3, r3, #9
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	8952      	ldrh	r2, [r2, #10]
 8006498:	fbb3 f3f2 	udiv	r3, r3, r2
 800649c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1d1a      	adds	r2, r3, #4
 80064a2:	613a      	str	r2, [r7, #16]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <clmt_clust+0x3a>
 80064ae:	2300      	movs	r3, #0
 80064b0:	e010      	b.n	80064d4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d307      	bcc.n	80064ca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	3304      	adds	r3, #4
 80064c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064c8:	e7e9      	b.n	800649e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80064ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4413      	add	r3, r2
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064f6:	d204      	bcs.n	8006502 <dir_sdi+0x22>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006502:	2302      	movs	r3, #2
 8006504:	e063      	b.n	80065ce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <dir_sdi+0x46>
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d902      	bls.n	8006526 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	8912      	ldrh	r2, [r2, #8]
 8006534:	4293      	cmp	r3, r2
 8006536:	d301      	bcc.n	800653c <dir_sdi+0x5c>
 8006538:	2302      	movs	r3, #2
 800653a:	e048      	b.n	80065ce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	61da      	str	r2, [r3, #28]
 8006544:	e029      	b.n	800659a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	895b      	ldrh	r3, [r3, #10]
 800654a:	025b      	lsls	r3, r3, #9
 800654c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800654e:	e019      	b.n	8006584 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6979      	ldr	r1, [r7, #20]
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fd06 	bl	8005f66 <get_fat>
 800655a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006562:	d101      	bne.n	8006568 <dir_sdi+0x88>
 8006564:	2301      	movs	r3, #1
 8006566:	e032      	b.n	80065ce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d904      	bls.n	8006578 <dir_sdi+0x98>
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	429a      	cmp	r2, r3
 8006576:	d301      	bcc.n	800657c <dir_sdi+0x9c>
 8006578:	2302      	movs	r3, #2
 800657a:	e028      	b.n	80065ce <dir_sdi+0xee>
			ofs -= csz;
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	429a      	cmp	r2, r3
 800658a:	d2e1      	bcs.n	8006550 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800658c:	6979      	ldr	r1, [r7, #20]
 800658e:	6938      	ldr	r0, [r7, #16]
 8006590:	f7ff fcca 	bl	8005f28 <clust2sect>
 8006594:	4602      	mov	r2, r0
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <dir_sdi+0xcc>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e010      	b.n	80065ce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	0a5b      	lsrs	r3, r3, #9
 80065b4:	441a      	add	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c6:	441a      	add	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	3320      	adds	r3, #32
 80065ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <dir_next+0x28>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065fc:	d301      	bcc.n	8006602 <dir_next+0x2c>
 80065fe:	2304      	movs	r3, #4
 8006600:	e0aa      	b.n	8006758 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 8098 	bne.w	800673e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10b      	bne.n	8006638 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	8912      	ldrh	r2, [r2, #8]
 8006628:	4293      	cmp	r3, r2
 800662a:	f0c0 8088 	bcc.w	800673e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	61da      	str	r2, [r3, #28]
 8006634:	2304      	movs	r3, #4
 8006636:	e08f      	b.n	8006758 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	0a5b      	lsrs	r3, r3, #9
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	8952      	ldrh	r2, [r2, #10]
 8006640:	3a01      	subs	r2, #1
 8006642:	4013      	ands	r3, r2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d17a      	bne.n	800673e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7ff fc88 	bl	8005f66 <get_fat>
 8006656:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d801      	bhi.n	8006662 <dir_next+0x8c>
 800665e:	2302      	movs	r3, #2
 8006660:	e07a      	b.n	8006758 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d101      	bne.n	800666e <dir_next+0x98>
 800666a:	2301      	movs	r3, #1
 800666c:	e074      	b.n	8006758 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	429a      	cmp	r2, r3
 8006676:	d358      	bcc.n	800672a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d104      	bne.n	8006688 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	61da      	str	r2, [r3, #28]
 8006684:	2304      	movs	r3, #4
 8006686:	e067      	b.n	8006758 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f7ff fe59 	bl	8006348 <create_chain>
 8006696:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <dir_next+0xcc>
 800669e:	2307      	movs	r3, #7
 80066a0:	e05a      	b.n	8006758 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <dir_next+0xd6>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e055      	b.n	8006758 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d101      	bne.n	80066b8 <dir_next+0xe2>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e04f      	b.n	8006758 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff fb55 	bl	8005d68 <sync_window>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <dir_next+0xf2>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e047      	b.n	8006758 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3330      	adds	r3, #48	; 0x30
 80066cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d0:	2100      	movs	r1, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff f97f 	bl	80059d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff fc22 	bl	8005f28 <clust2sect>
 80066e4:	4602      	mov	r2, r0
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80066ea:	e012      	b.n	8006712 <dir_next+0x13c>
						fs->wflag = 1;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2201      	movs	r2, #1
 80066f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff fb38 	bl	8005d68 <sync_window>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <dir_next+0x12c>
 80066fe:	2301      	movs	r3, #1
 8006700:	e02a      	b.n	8006758 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3301      	adds	r3, #1
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	62da      	str	r2, [r3, #44]	; 0x2c
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	895b      	ldrh	r3, [r3, #10]
 8006716:	461a      	mov	r2, r3
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	4293      	cmp	r3, r2
 800671c:	d3e6      	bcc.n	80066ec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006730:	6979      	ldr	r1, [r7, #20]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fbf8 	bl	8005f28 <clust2sect>
 8006738:	4602      	mov	r2, r0
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006750:	441a      	add	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006770:	2100      	movs	r1, #0
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff feb4 	bl	80064e0 <dir_sdi>
 8006778:	4603      	mov	r3, r0
 800677a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800677c:	7dfb      	ldrb	r3, [r7, #23]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d12b      	bne.n	80067da <dir_alloc+0x7a>
		n = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	4619      	mov	r1, r3
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7ff fb2f 	bl	8005df0 <move_window>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d11d      	bne.n	80067d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2be5      	cmp	r3, #229	; 0xe5
 80067a4:	d004      	beq.n	80067b0 <dir_alloc+0x50>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d107      	bne.n	80067c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	3301      	adds	r3, #1
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d102      	bne.n	80067c4 <dir_alloc+0x64>
 80067be:	e00c      	b.n	80067da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80067c4:	2101      	movs	r1, #1
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff ff05 	bl	80065d6 <dir_next>
 80067cc:	4603      	mov	r3, r0
 80067ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0d7      	beq.n	8006786 <dir_alloc+0x26>
 80067d6:	e000      	b.n	80067da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80067d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d101      	bne.n	80067e4 <dir_alloc+0x84>
 80067e0:	2307      	movs	r3, #7
 80067e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	331a      	adds	r3, #26
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff f847 	bl	8005890 <ld_word>
 8006802:	4603      	mov	r3, r0
 8006804:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b03      	cmp	r3, #3
 800680c:	d109      	bne.n	8006822 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	3314      	adds	r3, #20
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff f83c 	bl	8005890 <ld_word>
 8006818:	4603      	mov	r3, r0
 800681a:	041b      	lsls	r3, r3, #16
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006822:	68fb      	ldr	r3, [r7, #12]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	331a      	adds	r3, #26
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	b292      	uxth	r2, r2
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff f85f 	bl	8005906 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b03      	cmp	r3, #3
 800684e:	d109      	bne.n	8006864 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f103 0214 	add.w	r2, r3, #20
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	b29b      	uxth	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	4610      	mov	r0, r2
 8006860:	f7ff f851 	bl	8005906 <st_word>
	}
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800687a:	2100      	movs	r1, #0
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fe2f 	bl	80064e0 <dir_sdi>
 8006882:	4603      	mov	r3, r0
 8006884:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <dir_find+0x24>
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	e03e      	b.n	800690e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	4619      	mov	r1, r3
 8006896:	6938      	ldr	r0, [r7, #16]
 8006898:	f7ff faaa 	bl	8005df0 <move_window>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d12f      	bne.n	8006906 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <dir_find+0x4e>
 80068b4:	2304      	movs	r3, #4
 80068b6:	75fb      	strb	r3, [r7, #23]
 80068b8:	e028      	b.n	800690c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	330b      	adds	r3, #11
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	330b      	adds	r3, #11
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <dir_find+0x86>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a18      	ldr	r0, [r3, #32]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3324      	adds	r3, #36	; 0x24
 80068e4:	220b      	movs	r2, #11
 80068e6:	4619      	mov	r1, r3
 80068e8:	f7ff f88f 	bl	8005a0a <mem_cmp>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80068f2:	2100      	movs	r1, #0
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff fe6e 	bl	80065d6 <dir_next>
 80068fa:	4603      	mov	r3, r0
 80068fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0c5      	beq.n	8006890 <dir_find+0x24>
 8006904:	e002      	b.n	800690c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006906:	bf00      	nop
 8006908:	e000      	b.n	800690c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800690a:	bf00      	nop

	return res;
 800690c:	7dfb      	ldrb	r3, [r7, #23]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006924:	2101      	movs	r1, #1
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff ff1a 	bl	8006760 <dir_alloc>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d11c      	bne.n	8006970 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	4619      	mov	r1, r3
 800693c:	68b8      	ldr	r0, [r7, #8]
 800693e:	f7ff fa57 	bl	8005df0 <move_window>
 8006942:	4603      	mov	r3, r0
 8006944:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d111      	bne.n	8006970 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	2220      	movs	r2, #32
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff f83e 	bl	80059d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a18      	ldr	r0, [r3, #32]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3324      	adds	r3, #36	; 0x24
 8006962:	220b      	movs	r2, #11
 8006964:	4619      	mov	r1, r3
 8006966:	f7ff f815 	bl	8005994 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2201      	movs	r2, #1
 800696e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3324      	adds	r3, #36	; 0x24
 8006990:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006992:	220b      	movs	r2, #11
 8006994:	2120      	movs	r1, #32
 8006996:	68b8      	ldr	r0, [r7, #8]
 8006998:	f7ff f81d 	bl	80059d6 <mem_set>
	si = i = 0; ni = 8;
 800699c:	2300      	movs	r3, #0
 800699e:	613b      	str	r3, [r7, #16]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	2308      	movs	r3, #8
 80069a6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	617a      	str	r2, [r7, #20]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80069b6:	7ffb      	ldrb	r3, [r7, #31]
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d94e      	bls.n	8006a5a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80069bc:	7ffb      	ldrb	r3, [r7, #31]
 80069be:	2b2f      	cmp	r3, #47	; 0x2f
 80069c0:	d006      	beq.n	80069d0 <create_name+0x54>
 80069c2:	7ffb      	ldrb	r3, [r7, #31]
 80069c4:	2b5c      	cmp	r3, #92	; 0x5c
 80069c6:	d110      	bne.n	80069ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80069c8:	e002      	b.n	80069d0 <create_name+0x54>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	3301      	adds	r3, #1
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b2f      	cmp	r3, #47	; 0x2f
 80069da:	d0f6      	beq.n	80069ca <create_name+0x4e>
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b5c      	cmp	r3, #92	; 0x5c
 80069e6:	d0f0      	beq.n	80069ca <create_name+0x4e>
			break;
 80069e8:	e038      	b.n	8006a5c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80069ea:	7ffb      	ldrb	r3, [r7, #31]
 80069ec:	2b2e      	cmp	r3, #46	; 0x2e
 80069ee:	d003      	beq.n	80069f8 <create_name+0x7c>
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d30c      	bcc.n	8006a12 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b0b      	cmp	r3, #11
 80069fc:	d002      	beq.n	8006a04 <create_name+0x88>
 80069fe:	7ffb      	ldrb	r3, [r7, #31]
 8006a00:	2b2e      	cmp	r3, #46	; 0x2e
 8006a02:	d001      	beq.n	8006a08 <create_name+0x8c>
 8006a04:	2306      	movs	r3, #6
 8006a06:	e044      	b.n	8006a92 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006a08:	2308      	movs	r3, #8
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	230b      	movs	r3, #11
 8006a0e:	61bb      	str	r3, [r7, #24]
			continue;
 8006a10:	e022      	b.n	8006a58 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006a12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da04      	bge.n	8006a24 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
 8006a1c:	3b80      	subs	r3, #128	; 0x80
 8006a1e:	4a1f      	ldr	r2, [pc, #124]	; (8006a9c <create_name+0x120>)
 8006a20:	5cd3      	ldrb	r3, [r2, r3]
 8006a22:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006a24:	7ffb      	ldrb	r3, [r7, #31]
 8006a26:	4619      	mov	r1, r3
 8006a28:	481d      	ldr	r0, [pc, #116]	; (8006aa0 <create_name+0x124>)
 8006a2a:	f7ff f815 	bl	8005a58 <chk_chr>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <create_name+0xbc>
 8006a34:	2306      	movs	r3, #6
 8006a36:	e02c      	b.n	8006a92 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006a38:	7ffb      	ldrb	r3, [r7, #31]
 8006a3a:	2b60      	cmp	r3, #96	; 0x60
 8006a3c:	d905      	bls.n	8006a4a <create_name+0xce>
 8006a3e:	7ffb      	ldrb	r3, [r7, #31]
 8006a40:	2b7a      	cmp	r3, #122	; 0x7a
 8006a42:	d802      	bhi.n	8006a4a <create_name+0xce>
 8006a44:	7ffb      	ldrb	r3, [r7, #31]
 8006a46:	3b20      	subs	r3, #32
 8006a48:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	613a      	str	r2, [r7, #16]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	4413      	add	r3, r2
 8006a54:	7ffa      	ldrb	r2, [r7, #31]
 8006a56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006a58:	e7a6      	b.n	80069a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	441a      	add	r2, r3
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <create_name+0xf4>
 8006a6c:	2306      	movs	r3, #6
 8006a6e:	e010      	b.n	8006a92 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2be5      	cmp	r3, #229	; 0xe5
 8006a76:	d102      	bne.n	8006a7e <create_name+0x102>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2205      	movs	r2, #5
 8006a7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a7e:	7ffb      	ldrb	r3, [r7, #31]
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d801      	bhi.n	8006a88 <create_name+0x10c>
 8006a84:	2204      	movs	r2, #4
 8006a86:	e000      	b.n	8006a8a <create_name+0x10e>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	330b      	adds	r3, #11
 8006a8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006a90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3720      	adds	r7, #32
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08007e30 	.word	0x08007e30
 8006aa0:	08007dc0 	.word	0x08007dc0

08006aa4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ab8:	e002      	b.n	8006ac0 <follow_path+0x1c>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b2f      	cmp	r3, #47	; 0x2f
 8006ac6:	d0f8      	beq.n	8006aba <follow_path+0x16>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b5c      	cmp	r3, #92	; 0x5c
 8006ace:	d0f4      	beq.n	8006aba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b1f      	cmp	r3, #31
 8006adc:	d80a      	bhi.n	8006af4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fcf9 	bl	80064e0 <dir_sdi>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]
 8006af2:	e043      	b.n	8006b7c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006af4:	463b      	mov	r3, r7
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff ff3f 	bl	800697c <create_name>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d134      	bne.n	8006b72 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff feaf 	bl	800686c <dir_find>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006b18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d127      	bne.n	8006b76 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006b26:	7afb      	ldrb	r3, [r7, #11]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d122      	bne.n	8006b76 <follow_path+0xd2>
 8006b30:	2305      	movs	r3, #5
 8006b32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006b34:	e01f      	b.n	8006b76 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11c      	bne.n	8006b7a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	799b      	ldrb	r3, [r3, #6]
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d102      	bne.n	8006b52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b4c:	2305      	movs	r3, #5
 8006b4e:	75fb      	strb	r3, [r7, #23]
 8006b50:	e014      	b.n	8006b7c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b60:	4413      	add	r3, r2
 8006b62:	4619      	mov	r1, r3
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff fe42 	bl	80067ee <ld_clust>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b70:	e7c0      	b.n	8006af4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b72:	bf00      	nop
 8006b74:	e002      	b.n	8006b7c <follow_path+0xd8>
				break;
 8006b76:	bf00      	nop
 8006b78:	e000      	b.n	8006b7c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b7a:	bf00      	nop
			}
		}
	}

	return res;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b087      	sub	sp, #28
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d031      	beq.n	8006c00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e002      	b.n	8006baa <get_ldnumber+0x24>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d903      	bls.n	8006bba <get_ldnumber+0x34>
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b3a      	cmp	r3, #58	; 0x3a
 8006bb8:	d1f4      	bne.n	8006ba4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b3a      	cmp	r3, #58	; 0x3a
 8006bc0:	d11c      	bne.n	8006bfc <get_ldnumber+0x76>
			tp = *path;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	60fa      	str	r2, [r7, #12]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	3b30      	subs	r3, #48	; 0x30
 8006bd2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b09      	cmp	r3, #9
 8006bd8:	d80e      	bhi.n	8006bf8 <get_ldnumber+0x72>
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d10a      	bne.n	8006bf8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d107      	bne.n	8006bf8 <get_ldnumber+0x72>
					vol = (int)i;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	e002      	b.n	8006c02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c00:	693b      	ldr	r3, [r7, #16]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
	...

08006c10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	70da      	strb	r2, [r3, #3]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f04f 32ff 	mov.w	r2, #4294967295
 8006c26:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff f8e0 	bl	8005df0 <move_window>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <check_fs+0x2a>
 8006c36:	2304      	movs	r3, #4
 8006c38:	e038      	b.n	8006cac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3330      	adds	r3, #48	; 0x30
 8006c3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fe24 	bl	8005890 <ld_word>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d001      	beq.n	8006c58 <check_fs+0x48>
 8006c54:	2303      	movs	r3, #3
 8006c56:	e029      	b.n	8006cac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c5e:	2be9      	cmp	r3, #233	; 0xe9
 8006c60:	d009      	beq.n	8006c76 <check_fs+0x66>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c68:	2beb      	cmp	r3, #235	; 0xeb
 8006c6a:	d11e      	bne.n	8006caa <check_fs+0x9a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c72:	2b90      	cmp	r3, #144	; 0x90
 8006c74:	d119      	bne.n	8006caa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3330      	adds	r3, #48	; 0x30
 8006c7a:	3336      	adds	r3, #54	; 0x36
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fe1f 	bl	80058c0 <ld_dword>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c88:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <check_fs+0xa4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d101      	bne.n	8006c92 <check_fs+0x82>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e00c      	b.n	8006cac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3330      	adds	r3, #48	; 0x30
 8006c96:	3352      	adds	r3, #82	; 0x52
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fe11 	bl	80058c0 <ld_dword>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <check_fs+0xa8>)
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d101      	bne.n	8006caa <check_fs+0x9a>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e000      	b.n	8006cac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006caa:	2302      	movs	r3, #2
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	00544146 	.word	0x00544146
 8006cb8:	33544146 	.word	0x33544146

08006cbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b096      	sub	sp, #88	; 0x58
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7ff ff58 	bl	8006b86 <get_ldnumber>
 8006cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	da01      	bge.n	8006ce2 <find_volume+0x26>
 8006cde:	230b      	movs	r3, #11
 8006ce0:	e22e      	b.n	8007140 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006ce2:	4aa8      	ldr	r2, [pc, #672]	; (8006f84 <find_volume+0x2c8>)
 8006ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <find_volume+0x3a>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	e224      	b.n	8007140 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cfa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d01a      	beq.n	8006d42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe fd1f 	bl	8005754 <disk_status>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10c      	bne.n	8006d42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d007      	beq.n	8006d3e <find_volume+0x82>
 8006d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006d3a:	230a      	movs	r3, #10
 8006d3c:	e200      	b.n	8007140 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e1fe      	b.n	8007140 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	2200      	movs	r2, #0
 8006d46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	785b      	ldrb	r3, [r3, #1]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe fd17 	bl	8005788 <disk_initialize>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e1e7      	b.n	8007140 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <find_volume+0xca>
 8006d76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d82:	230a      	movs	r3, #10
 8006d84:	e1dc      	b.n	8007140 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d8e:	f7ff ff3f 	bl	8006c10 <check_fs>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d14b      	bne.n	8006e38 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006da0:	2300      	movs	r3, #0
 8006da2:	643b      	str	r3, [r7, #64]	; 0x40
 8006da4:	e01f      	b.n	8006de6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006db4:	4413      	add	r3, r2
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	3304      	adds	r3, #4
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d006      	beq.n	8006dd0 <find_volume+0x114>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fd7a 	bl	80058c0 <ld_dword>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	e000      	b.n	8006dd2 <find_volume+0x116>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006dda:	440b      	add	r3, r1
 8006ddc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de2:	3301      	adds	r3, #1
 8006de4:	643b      	str	r3, [r7, #64]	; 0x40
 8006de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d9dc      	bls.n	8006da6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006dec:	2300      	movs	r3, #0
 8006dee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <find_volume+0x140>
 8006df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006e04:	4413      	add	r3, r2
 8006e06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <find_volume+0x162>
 8006e12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e16:	f7ff fefb 	bl	8006c10 <check_fs>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	e000      	b.n	8006e20 <find_volume+0x164>
 8006e1e:	2303      	movs	r3, #3
 8006e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d905      	bls.n	8006e38 <find_volume+0x17c>
 8006e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e2e:	3301      	adds	r3, #1
 8006e30:	643b      	str	r3, [r7, #64]	; 0x40
 8006e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d9e1      	bls.n	8006dfc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d101      	bne.n	8006e44 <find_volume+0x188>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e17d      	b.n	8007140 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d901      	bls.n	8006e50 <find_volume+0x194>
 8006e4c:	230d      	movs	r3, #13
 8006e4e:	e177      	b.n	8007140 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	3330      	adds	r3, #48	; 0x30
 8006e54:	330b      	adds	r3, #11
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fd1a 	bl	8005890 <ld_word>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e62:	d001      	beq.n	8006e68 <find_volume+0x1ac>
 8006e64:	230d      	movs	r3, #13
 8006e66:	e16b      	b.n	8007140 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	3330      	adds	r3, #48	; 0x30
 8006e6c:	3316      	adds	r3, #22
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fd0e 	bl	8005890 <ld_word>
 8006e74:	4603      	mov	r3, r0
 8006e76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <find_volume+0x1d0>
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	3330      	adds	r3, #48	; 0x30
 8006e82:	3324      	adds	r3, #36	; 0x24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe fd1b 	bl	80058c0 <ld_dword>
 8006e8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e90:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	789b      	ldrb	r3, [r3, #2]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d005      	beq.n	8006eb0 <find_volume+0x1f4>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	789b      	ldrb	r3, [r3, #2]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d001      	beq.n	8006eb0 <find_volume+0x1f4>
 8006eac:	230d      	movs	r3, #13
 8006eae:	e147      	b.n	8007140 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	789b      	ldrb	r3, [r3, #2]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	fb02 f303 	mul.w	r3, r2, r3
 8006ebc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	895b      	ldrh	r3, [r3, #10]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <find_volume+0x228>
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	895b      	ldrh	r3, [r3, #10]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	895b      	ldrh	r3, [r3, #10]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <find_volume+0x22c>
 8006ee4:	230d      	movs	r3, #13
 8006ee6:	e12b      	b.n	8007140 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	3330      	adds	r3, #48	; 0x30
 8006eec:	3311      	adds	r3, #17
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fcce 	bl	8005890 <ld_word>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	891b      	ldrh	r3, [r3, #8]
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <find_volume+0x252>
 8006f0a:	230d      	movs	r3, #13
 8006f0c:	e118      	b.n	8007140 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	3330      	adds	r3, #48	; 0x30
 8006f12:	3313      	adds	r3, #19
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe fcbb 	bl	8005890 <ld_word>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <find_volume+0x276>
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	3330      	adds	r3, #48	; 0x30
 8006f28:	3320      	adds	r3, #32
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fcc8 	bl	80058c0 <ld_dword>
 8006f30:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	3330      	adds	r3, #48	; 0x30
 8006f36:	330e      	adds	r3, #14
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fca9 	bl	8005890 <ld_word>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006f42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <find_volume+0x290>
 8006f48:	230d      	movs	r3, #13
 8006f4a:	e0f9      	b.n	8007140 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006f4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f50:	4413      	add	r3, r2
 8006f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f54:	8912      	ldrh	r2, [r2, #8]
 8006f56:	0912      	lsrs	r2, r2, #4
 8006f58:	b292      	uxth	r2, r2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d201      	bcs.n	8006f6a <find_volume+0x2ae>
 8006f66:	230d      	movs	r3, #13
 8006f68:	e0ea      	b.n	8007140 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f72:	8952      	ldrh	r2, [r2, #10]
 8006f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <find_volume+0x2cc>
 8006f80:	230d      	movs	r3, #13
 8006f82:	e0dd      	b.n	8007140 <find_volume+0x484>
 8006f84:	2000004c 	.word	0x2000004c
		fmt = FS_FAT32;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d802      	bhi.n	8006f9e <find_volume+0x2e2>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d802      	bhi.n	8006fae <find_volume+0x2f2>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fba:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006fbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc0:	441a      	add	r2, r3
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	441a      	add	r2, r3
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d11e      	bne.n	8007016 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	3330      	adds	r3, #48	; 0x30
 8006fdc:	332a      	adds	r3, #42	; 0x2a
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fc56 	bl	8005890 <ld_word>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <find_volume+0x332>
 8006fea:	230d      	movs	r3, #13
 8006fec:	e0a8      	b.n	8007140 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	891b      	ldrh	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <find_volume+0x33e>
 8006ff6:	230d      	movs	r3, #13
 8006ff8:	e0a2      	b.n	8007140 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	3330      	adds	r3, #48	; 0x30
 8006ffe:	332c      	adds	r3, #44	; 0x2c
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fc5d 	bl	80058c0 <ld_dword>
 8007006:	4602      	mov	r2, r0
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	647b      	str	r3, [r7, #68]	; 0x44
 8007014:	e01f      	b.n	8007056 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	891b      	ldrh	r3, [r3, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <find_volume+0x366>
 800701e:	230d      	movs	r3, #13
 8007020:	e08e      	b.n	8007140 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	6a1a      	ldr	r2, [r3, #32]
 8007026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007028:	441a      	add	r2, r3
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800702e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007032:	2b02      	cmp	r3, #2
 8007034:	d103      	bne.n	800703e <find_volume+0x382>
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	e00a      	b.n	8007054 <find_volume+0x398>
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	695a      	ldr	r2, [r3, #20]
 8007042:	4613      	mov	r3, r2
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	4413      	add	r3, r2
 8007048:	085a      	lsrs	r2, r3, #1
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007054:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007060:	0a5b      	lsrs	r3, r3, #9
 8007062:	429a      	cmp	r2, r3
 8007064:	d201      	bcs.n	800706a <find_volume+0x3ae>
 8007066:	230d      	movs	r3, #13
 8007068:	e06a      	b.n	8007140 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	611a      	str	r2, [r3, #16]
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	2280      	movs	r2, #128	; 0x80
 800707e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007084:	2b03      	cmp	r3, #3
 8007086:	d149      	bne.n	800711c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	3330      	adds	r3, #48	; 0x30
 800708c:	3330      	adds	r3, #48	; 0x30
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fbfe 	bl	8005890 <ld_word>
 8007094:	4603      	mov	r3, r0
 8007096:	2b01      	cmp	r3, #1
 8007098:	d140      	bne.n	800711c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800709a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709c:	3301      	adds	r3, #1
 800709e:	4619      	mov	r1, r3
 80070a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070a2:	f7fe fea5 	bl	8005df0 <move_window>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d137      	bne.n	800711c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	2200      	movs	r2, #0
 80070b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	3330      	adds	r3, #48	; 0x30
 80070b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fbe8 	bl	8005890 <ld_word>
 80070c0:	4603      	mov	r3, r0
 80070c2:	461a      	mov	r2, r3
 80070c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d127      	bne.n	800711c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	3330      	adds	r3, #48	; 0x30
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fbf5 	bl	80058c0 <ld_dword>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <find_volume+0x48c>)
 80070da:	429a      	cmp	r2, r3
 80070dc:	d11e      	bne.n	800711c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	3330      	adds	r3, #48	; 0x30
 80070e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fbea 	bl	80058c0 <ld_dword>
 80070ec:	4602      	mov	r2, r0
 80070ee:	4b17      	ldr	r3, [pc, #92]	; (800714c <find_volume+0x490>)
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d113      	bne.n	800711c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	3330      	adds	r3, #48	; 0x30
 80070f8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe fbdf 	bl	80058c0 <ld_dword>
 8007102:	4602      	mov	r2, r0
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	3330      	adds	r3, #48	; 0x30
 800710c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe fbd5 	bl	80058c0 <ld_dword>
 8007116:	4602      	mov	r2, r0
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007122:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <find_volume+0x494>)
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	4b08      	ldr	r3, [pc, #32]	; (8007150 <find_volume+0x494>)
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <find_volume+0x494>)
 8007132:	881a      	ldrh	r2, [r3, #0]
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800713a:	f7fe fdf1 	bl	8005d20 <clear_lock>
#endif
	return FR_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3758      	adds	r7, #88	; 0x58
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	41615252 	.word	0x41615252
 800714c:	61417272 	.word	0x61417272
 8007150:	20000050 	.word	0x20000050

08007154 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800715e:	2309      	movs	r3, #9
 8007160:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01c      	beq.n	80071a2 <validate+0x4e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d018      	beq.n	80071a2 <validate+0x4e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d013      	beq.n	80071a2 <validate+0x4e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	889a      	ldrh	r2, [r3, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	88db      	ldrh	r3, [r3, #6]
 8007184:	429a      	cmp	r2, r3
 8007186:	d10c      	bne.n	80071a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	785b      	ldrb	r3, [r3, #1]
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe fae0 	bl	8005754 <disk_status>
 8007194:	4603      	mov	r3, r0
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <validate+0x4e>
			res = FR_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <validate+0x5a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	e000      	b.n	80071b0 <validate+0x5c>
 80071ae:	2300      	movs	r3, #0
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	6013      	str	r3, [r2, #0]
	return res;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80071d2:	f107 0310 	add.w	r3, r7, #16
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fcd5 	bl	8006b86 <get_ldnumber>
 80071dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	da01      	bge.n	80071e8 <f_mount+0x28>
 80071e4:	230b      	movs	r3, #11
 80071e6:	e02b      	b.n	8007240 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80071e8:	4a17      	ldr	r2, [pc, #92]	; (8007248 <f_mount+0x88>)
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80071f8:	69b8      	ldr	r0, [r7, #24]
 80071fa:	f7fe fd91 	bl	8005d20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	490d      	ldr	r1, [pc, #52]	; (8007248 <f_mount+0x88>)
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <f_mount+0x66>
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d001      	beq.n	800722a <f_mount+0x6a>
 8007226:	2300      	movs	r3, #0
 8007228:	e00a      	b.n	8007240 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800722a:	f107 010c 	add.w	r1, r7, #12
 800722e:	f107 0308 	add.w	r3, r7, #8
 8007232:	2200      	movs	r2, #0
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff fd41 	bl	8006cbc <find_volume>
 800723a:	4603      	mov	r3, r0
 800723c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800723e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	2000004c 	.word	0x2000004c

0800724c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b098      	sub	sp, #96	; 0x60
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <f_open+0x18>
 8007260:	2309      	movs	r3, #9
 8007262:	e1ad      	b.n	80075c0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800726a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800726c:	79fa      	ldrb	r2, [r7, #7]
 800726e:	f107 0110 	add.w	r1, r7, #16
 8007272:	f107 0308 	add.w	r3, r7, #8
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff fd20 	bl	8006cbc <find_volume>
 800727c:	4603      	mov	r3, r0
 800727e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007286:	2b00      	cmp	r3, #0
 8007288:	f040 8191 	bne.w	80075ae <f_open+0x362>
		dj.obj.fs = fs;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	f107 0314 	add.w	r3, r7, #20
 8007296:	4611      	mov	r1, r2
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff fc03 	bl	8006aa4 <follow_path>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80072a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11a      	bne.n	80072e2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80072ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	da03      	bge.n	80072be <f_open+0x72>
				res = FR_INVALID_NAME;
 80072b6:	2306      	movs	r3, #6
 80072b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072bc:	e011      	b.n	80072e2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bf14      	ite	ne
 80072c8:	2301      	movne	r3, #1
 80072ca:	2300      	moveq	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	f107 0314 	add.w	r3, r7, #20
 80072d4:	4611      	mov	r1, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe fbda 	bl	8005a90 <chk_lock>
 80072dc:	4603      	mov	r3, r0
 80072de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	f003 031c 	and.w	r3, r3, #28
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d07f      	beq.n	80073ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80072ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d017      	beq.n	8007324 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80072f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d10e      	bne.n	800731a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80072fc:	f7fe fc24 	bl	8005b48 <enq_lock>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d006      	beq.n	8007314 <f_open+0xc8>
 8007306:	f107 0314 	add.w	r3, r7, #20
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff fb03 	bl	8006916 <dir_register>
 8007310:	4603      	mov	r3, r0
 8007312:	e000      	b.n	8007316 <f_open+0xca>
 8007314:	2312      	movs	r3, #18
 8007316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	f043 0308 	orr.w	r3, r3, #8
 8007320:	71fb      	strb	r3, [r7, #7]
 8007322:	e010      	b.n	8007346 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007324:	7ebb      	ldrb	r3, [r7, #26]
 8007326:	f003 0311 	and.w	r3, r3, #17
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <f_open+0xea>
					res = FR_DENIED;
 800732e:	2307      	movs	r3, #7
 8007330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007334:	e007      	b.n	8007346 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <f_open+0xfa>
 8007340:	2308      	movs	r3, #8
 8007342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800734a:	2b00      	cmp	r3, #0
 800734c:	d168      	bne.n	8007420 <f_open+0x1d4>
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d063      	beq.n	8007420 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007358:	f7fe f876 	bl	8005448 <get_fattime>
 800735c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007360:	330e      	adds	r3, #14
 8007362:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fae9 	bl	800593c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	3316      	adds	r3, #22
 800736e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fae3 	bl	800593c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007378:	330b      	adds	r3, #11
 800737a:	2220      	movs	r2, #32
 800737c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007382:	4611      	mov	r1, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fa32 	bl	80067ee <ld_clust>
 800738a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007390:	2200      	movs	r2, #0
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff fa4a 	bl	800682c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739a:	331c      	adds	r3, #28
 800739c:	2100      	movs	r1, #0
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe facc 	bl	800593c <st_dword>
					fs->wflag = 1;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2201      	movs	r2, #1
 80073a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80073aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d037      	beq.n	8007420 <f_open+0x1d4>
						dw = fs->winsect;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80073b6:	f107 0314 	add.w	r3, r7, #20
 80073ba:	2200      	movs	r2, #0
 80073bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe ff5d 	bl	800627e <remove_chain>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80073ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d126      	bne.n	8007420 <f_open+0x1d4>
							res = move_window(fs, dw);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe fd0a 	bl	8005df0 <move_window>
 80073dc:	4603      	mov	r3, r0
 80073de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073e6:	3a01      	subs	r2, #1
 80073e8:	60da      	str	r2, [r3, #12]
 80073ea:	e019      	b.n	8007420 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80073ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d115      	bne.n	8007420 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80073f4:	7ebb      	ldrb	r3, [r7, #26]
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <f_open+0x1ba>
					res = FR_NO_FILE;
 80073fe:	2304      	movs	r3, #4
 8007400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007404:	e00c      	b.n	8007420 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <f_open+0x1d4>
 8007410:	7ebb      	ldrb	r3, [r7, #26]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <f_open+0x1d4>
						res = FR_DENIED;
 800741a:	2307      	movs	r3, #7
 800741c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007424:	2b00      	cmp	r3, #0
 8007426:	d128      	bne.n	800747a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007432:	79fb      	ldrb	r3, [r7, #7]
 8007434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007438:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	bf14      	ite	ne
 8007452:	2301      	movne	r3, #1
 8007454:	2300      	moveq	r3, #0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	f107 0314 	add.w	r3, r7, #20
 800745e:	4611      	mov	r1, r2
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe fb93 	bl	8005b8c <inc_lock>
 8007466:	4602      	mov	r2, r0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <f_open+0x22e>
 8007474:	2302      	movs	r3, #2
 8007476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800747a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800747e:	2b00      	cmp	r3, #0
 8007480:	f040 8095 	bne.w	80075ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007488:	4611      	mov	r1, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f7ff f9af 	bl	80067ee <ld_clust>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	331c      	adds	r3, #28
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe fa10 	bl	80058c0 <ld_dword>
 80074a0:	4602      	mov	r2, r0
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	88da      	ldrh	r2, [r3, #6]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	79fa      	ldrb	r2, [r7, #7]
 80074be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3330      	adds	r3, #48	; 0x30
 80074d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074da:	2100      	movs	r1, #0
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe fa7a 	bl	80059d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d060      	beq.n	80075ae <f_open+0x362>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d05c      	beq.n	80075ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	895b      	ldrh	r3, [r3, #10]
 8007500:	025b      	lsls	r3, r3, #9
 8007502:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	657b      	str	r3, [r7, #84]	; 0x54
 8007510:	e016      	b.n	8007540 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe fd25 	bl	8005f66 <get_fat>
 800751c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800751e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007520:	2b01      	cmp	r3, #1
 8007522:	d802      	bhi.n	800752a <f_open+0x2de>
 8007524:	2302      	movs	r3, #2
 8007526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800752a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d102      	bne.n	8007538 <f_open+0x2ec>
 8007532:	2301      	movs	r3, #1
 8007534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800753a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	657b      	str	r3, [r7, #84]	; 0x54
 8007540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007544:	2b00      	cmp	r3, #0
 8007546:	d103      	bne.n	8007550 <f_open+0x304>
 8007548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800754a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754c:	429a      	cmp	r2, r3
 800754e:	d8e0      	bhi.n	8007512 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007554:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800755a:	2b00      	cmp	r3, #0
 800755c:	d127      	bne.n	80075ae <f_open+0x362>
 800755e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007564:	2b00      	cmp	r3, #0
 8007566:	d022      	beq.n	80075ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fcdb 	bl	8005f28 <clust2sect>
 8007572:	6478      	str	r0, [r7, #68]	; 0x44
 8007574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <f_open+0x336>
						res = FR_INT_ERR;
 800757a:	2302      	movs	r3, #2
 800757c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007580:	e015      	b.n	80075ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007584:	0a5a      	lsrs	r2, r3, #9
 8007586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007588:	441a      	add	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	7858      	ldrb	r0, [r3, #1]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a1a      	ldr	r2, [r3, #32]
 800759c:	2301      	movs	r3, #1
 800759e:	f7fe f919 	bl	80057d4 <disk_read>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <f_open+0x362>
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80075ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <f_open+0x370>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80075bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3760      	adds	r7, #96	; 0x60
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08e      	sub	sp, #56	; 0x38
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f107 0214 	add.w	r2, r7, #20
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff fdb3 	bl	8007154 <validate>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80075f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d107      	bne.n	800760c <f_read+0x44>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	7d5b      	ldrb	r3, [r3, #21]
 8007600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <f_read+0x4a>
 800760c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007610:	e115      	b.n	800783e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	7d1b      	ldrb	r3, [r3, #20]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <f_read+0x5a>
 800761e:	2307      	movs	r3, #7
 8007620:	e10d      	b.n	800783e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	429a      	cmp	r2, r3
 8007634:	f240 80fe 	bls.w	8007834 <f_read+0x26c>
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800763c:	e0fa      	b.n	8007834 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007646:	2b00      	cmp	r3, #0
 8007648:	f040 80c6 	bne.w	80077d8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	0a5b      	lsrs	r3, r3, #9
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	8952      	ldrh	r2, [r2, #10]
 8007656:	3a01      	subs	r2, #1
 8007658:	4013      	ands	r3, r2
 800765a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d12f      	bne.n	80076c2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d103      	bne.n	8007672 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	633b      	str	r3, [r7, #48]	; 0x30
 8007670:	e013      	b.n	800769a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d007      	beq.n	800768a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	4619      	mov	r1, r3
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f7fe fef9 	bl	8006478 <clmt_clust>
 8007686:	6338      	str	r0, [r7, #48]	; 0x30
 8007688:	e007      	b.n	800769a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fe fc67 	bl	8005f66 <get_fat>
 8007698:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	2b01      	cmp	r3, #1
 800769e:	d804      	bhi.n	80076aa <f_read+0xe2>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2202      	movs	r2, #2
 80076a4:	755a      	strb	r2, [r3, #21]
 80076a6:	2302      	movs	r3, #2
 80076a8:	e0c9      	b.n	800783e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b0:	d104      	bne.n	80076bc <f_read+0xf4>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2201      	movs	r2, #1
 80076b6:	755a      	strb	r2, [r3, #21]
 80076b8:	2301      	movs	r3, #1
 80076ba:	e0c0      	b.n	800783e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	4619      	mov	r1, r3
 80076ca:	4610      	mov	r0, r2
 80076cc:	f7fe fc2c 	bl	8005f28 <clust2sect>
 80076d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d104      	bne.n	80076e2 <f_read+0x11a>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2202      	movs	r2, #2
 80076dc:	755a      	strb	r2, [r3, #21]
 80076de:	2302      	movs	r3, #2
 80076e0:	e0ad      	b.n	800783e <f_read+0x276>
			sect += csect;
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	0a5b      	lsrs	r3, r3, #9
 80076ee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d039      	beq.n	800776a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	4413      	add	r3, r2
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	8952      	ldrh	r2, [r2, #10]
 8007700:	4293      	cmp	r3, r2
 8007702:	d905      	bls.n	8007710 <f_read+0x148>
					cc = fs->csize - csect;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	895b      	ldrh	r3, [r3, #10]
 8007708:	461a      	mov	r2, r3
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	7858      	ldrb	r0, [r3, #1]
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800771a:	f7fe f85b 	bl	80057d4 <disk_read>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <f_read+0x166>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	755a      	strb	r2, [r3, #21]
 800772a:	2301      	movs	r3, #1
 800772c:	e087      	b.n	800783e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	7d1b      	ldrb	r3, [r3, #20]
 8007732:	b25b      	sxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	da14      	bge.n	8007762 <f_read+0x19a>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a1a      	ldr	r2, [r3, #32]
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007742:	429a      	cmp	r2, r3
 8007744:	d90d      	bls.n	8007762 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a1a      	ldr	r2, [r3, #32]
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	025b      	lsls	r3, r3, #9
 8007750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007752:	18d0      	adds	r0, r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3330      	adds	r3, #48	; 0x30
 8007758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800775c:	4619      	mov	r1, r3
 800775e:	f7fe f919 	bl	8005994 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	025b      	lsls	r3, r3, #9
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007768:	e050      	b.n	800780c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	429a      	cmp	r2, r3
 8007772:	d02e      	beq.n	80077d2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	7d1b      	ldrb	r3, [r3, #20]
 8007778:	b25b      	sxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	da18      	bge.n	80077b0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	7858      	ldrb	r0, [r3, #1]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a1a      	ldr	r2, [r3, #32]
 800778c:	2301      	movs	r3, #1
 800778e:	f7fe f841 	bl	8005814 <disk_write>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <f_read+0x1da>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2201      	movs	r2, #1
 800779c:	755a      	strb	r2, [r3, #21]
 800779e:	2301      	movs	r3, #1
 80077a0:	e04d      	b.n	800783e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	7d1b      	ldrb	r3, [r3, #20]
 80077a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	7858      	ldrb	r0, [r3, #1]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077ba:	2301      	movs	r3, #1
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	f7fe f809 	bl	80057d4 <disk_read>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <f_read+0x20a>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	755a      	strb	r2, [r3, #21]
 80077ce:	2301      	movs	r3, #1
 80077d0:	e035      	b.n	800783e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80077e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d901      	bls.n	80077f2 <f_read+0x22a>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007800:	4413      	add	r3, r2
 8007802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007804:	4619      	mov	r1, r3
 8007806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007808:	f7fe f8c4 	bl	8005994 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800780c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	4413      	add	r3, r2
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	441a      	add	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	619a      	str	r2, [r3, #24]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	441a      	add	r2, r3
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	f47f af01 	bne.w	800763e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3738      	adds	r7, #56	; 0x38
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b08c      	sub	sp, #48	; 0x30
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]
 8007852:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f107 0210 	add.w	r2, r7, #16
 8007864:	4611      	mov	r1, r2
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff fc74 	bl	8007154 <validate>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007876:	2b00      	cmp	r3, #0
 8007878:	d107      	bne.n	800788a <f_write+0x44>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	7d5b      	ldrb	r3, [r3, #21]
 800787e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <f_write+0x4a>
 800788a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800788e:	e14b      	b.n	8007b28 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	7d1b      	ldrb	r3, [r3, #20]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <f_write+0x5a>
 800789c:	2307      	movs	r3, #7
 800789e:	e143      	b.n	8007b28 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	699a      	ldr	r2, [r3, #24]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	441a      	add	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	f080 812d 	bcs.w	8007b0c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	43db      	mvns	r3, r3
 80078b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80078ba:	e127      	b.n	8007b0c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 80e3 	bne.w	8007a90 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	0a5b      	lsrs	r3, r3, #9
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	8952      	ldrh	r2, [r2, #10]
 80078d4:	3a01      	subs	r2, #1
 80078d6:	4013      	ands	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d143      	bne.n	8007968 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10c      	bne.n	8007902 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11a      	bne.n	800792a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe fd25 	bl	8006348 <create_chain>
 80078fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8007900:	e013      	b.n	800792a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d007      	beq.n	800791a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	4619      	mov	r1, r3
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7fe fdb1 	bl	8006478 <clmt_clust>
 8007916:	62b8      	str	r0, [r7, #40]	; 0x28
 8007918:	e007      	b.n	800792a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fe fd10 	bl	8006348 <create_chain>
 8007928:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 80f2 	beq.w	8007b16 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	2b01      	cmp	r3, #1
 8007936:	d104      	bne.n	8007942 <f_write+0xfc>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2202      	movs	r2, #2
 800793c:	755a      	strb	r2, [r3, #21]
 800793e:	2302      	movs	r3, #2
 8007940:	e0f2      	b.n	8007b28 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d104      	bne.n	8007954 <f_write+0x10e>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	755a      	strb	r2, [r3, #21]
 8007950:	2301      	movs	r3, #1
 8007952:	e0e9      	b.n	8007b28 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007958:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <f_write+0x122>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007966:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	7d1b      	ldrb	r3, [r3, #20]
 800796c:	b25b      	sxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	da18      	bge.n	80079a4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	7858      	ldrb	r0, [r3, #1]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a1a      	ldr	r2, [r3, #32]
 8007980:	2301      	movs	r3, #1
 8007982:	f7fd ff47 	bl	8005814 <disk_write>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <f_write+0x150>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	755a      	strb	r2, [r3, #21]
 8007992:	2301      	movs	r3, #1
 8007994:	e0c8      	b.n	8007b28 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	7d1b      	ldrb	r3, [r3, #20]
 800799a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f7fe fabb 	bl	8005f28 <clust2sect>
 80079b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d104      	bne.n	80079c4 <f_write+0x17e>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2202      	movs	r2, #2
 80079be:	755a      	strb	r2, [r3, #21]
 80079c0:	2302      	movs	r3, #2
 80079c2:	e0b1      	b.n	8007b28 <f_write+0x2e2>
			sect += csect;
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	4413      	add	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	0a5b      	lsrs	r3, r3, #9
 80079d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d03c      	beq.n	8007a52 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	4413      	add	r3, r2
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	8952      	ldrh	r2, [r2, #10]
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d905      	bls.n	80079f2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	895b      	ldrh	r3, [r3, #10]
 80079ea:	461a      	mov	r2, r3
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	7858      	ldrb	r0, [r3, #1]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	69f9      	ldr	r1, [r7, #28]
 80079fc:	f7fd ff0a 	bl	8005814 <disk_write>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d004      	beq.n	8007a10 <f_write+0x1ca>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	755a      	strb	r2, [r3, #21]
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e08b      	b.n	8007b28 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a1a      	ldr	r2, [r3, #32]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	6a3a      	ldr	r2, [r7, #32]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d915      	bls.n	8007a4a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1a      	ldr	r2, [r3, #32]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	025b      	lsls	r3, r3, #9
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	4413      	add	r3, r2
 8007a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a36:	4619      	mov	r1, r3
 8007a38:	f7fd ffac 	bl	8005994 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	7d1b      	ldrb	r3, [r3, #20]
 8007a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	025b      	lsls	r3, r3, #9
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007a50:	e03f      	b.n	8007ad2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d016      	beq.n	8007a8a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	699a      	ldr	r2, [r3, #24]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d210      	bcs.n	8007a8a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	7858      	ldrb	r0, [r3, #1]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a72:	2301      	movs	r3, #1
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	f7fd fead 	bl	80057d4 <disk_read>
 8007a7a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2201      	movs	r2, #1
 8007a84:	755a      	strb	r2, [r3, #21]
 8007a86:	2301      	movs	r3, #1
 8007a88:	e04e      	b.n	8007b28 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d901      	bls.n	8007aaa <f_write+0x264>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab8:	4413      	add	r3, r2
 8007aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007abc:	69f9      	ldr	r1, [r7, #28]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fd ff68 	bl	8005994 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	7d1b      	ldrb	r3, [r3, #20]
 8007ac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	4413      	add	r3, r2
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	699a      	ldr	r2, [r3, #24]
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	441a      	add	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	619a      	str	r2, [r3, #24]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	bf38      	it	cc
 8007af2:	461a      	movcc	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	60da      	str	r2, [r3, #12]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	441a      	add	r2, r3
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f47f aed4 	bne.w	80078bc <f_write+0x76>
 8007b14:	e000      	b.n	8007b18 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b16:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	7d1b      	ldrb	r3, [r3, #20]
 8007b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3730      	adds	r7, #48	; 0x30
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f107 0208 	add.w	r2, r7, #8
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fb07 	bl	8007154 <validate>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d168      	bne.n	8007c22 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7d1b      	ldrb	r3, [r3, #20]
 8007b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d062      	beq.n	8007c22 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7d1b      	ldrb	r3, [r3, #20]
 8007b60:	b25b      	sxtb	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	da15      	bge.n	8007b92 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	7858      	ldrb	r0, [r3, #1]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	2301      	movs	r3, #1
 8007b76:	f7fd fe4d 	bl	8005814 <disk_write>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <f_sync+0x54>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e04f      	b.n	8007c24 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7d1b      	ldrb	r3, [r3, #20]
 8007b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007b92:	f7fd fc59 	bl	8005448 <get_fattime>
 8007b96:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7fe f925 	bl	8005df0 <move_window>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d138      	bne.n	8007c22 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	330b      	adds	r3, #11
 8007bba:	781a      	ldrb	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	330b      	adds	r3, #11
 8007bc0:	f042 0220 	orr.w	r2, r2, #32
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	f7fe fe2a 	bl	800682c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f103 021c 	add.w	r2, r3, #28
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f7fd fea9 	bl	800593c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3316      	adds	r3, #22
 8007bee:	6939      	ldr	r1, [r7, #16]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fd fea3 	bl	800593c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3312      	adds	r3, #18
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fd fe82 	bl	8005906 <st_word>
					fs->wflag = 1;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2201      	movs	r2, #1
 8007c06:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe f91e 	bl	8005e4c <sync_fs>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7d1b      	ldrb	r3, [r3, #20]
 8007c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff ff7b 	bl	8007b30 <f_sync>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d118      	bne.n	8007c76 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f107 0208 	add.w	r2, r7, #8
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fa81 	bl	8007154 <validate>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10c      	bne.n	8007c76 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe f821 	bl	8005ca8 <dec_lock>
 8007c66:	4603      	mov	r3, r0
 8007c68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d102      	bne.n	8007c76 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007c96:	4b1f      	ldr	r3, [pc, #124]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007c98:	7a5b      	ldrb	r3, [r3, #9]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d131      	bne.n	8007d04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ca0:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007ca2:	7a5b      	ldrb	r3, [r3, #9]
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	4b1a      	ldr	r3, [pc, #104]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007caa:	2100      	movs	r1, #0
 8007cac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cae:	4b19      	ldr	r3, [pc, #100]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cb0:	7a5b      	ldrb	r3, [r3, #9]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007cbe:	4b15      	ldr	r3, [pc, #84]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cc0:	7a5b      	ldrb	r3, [r3, #9]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cc8:	4413      	add	r3, r2
 8007cca:	79fa      	ldrb	r2, [r7, #7]
 8007ccc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cd0:	7a5b      	ldrb	r3, [r3, #9]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	b2d1      	uxtb	r1, r2
 8007cd8:	4a0e      	ldr	r2, [pc, #56]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cda:	7251      	strb	r1, [r2, #9]
 8007cdc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cde:	7dbb      	ldrb	r3, [r7, #22]
 8007ce0:	3330      	adds	r3, #48	; 0x30
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	3301      	adds	r3, #1
 8007cec:	223a      	movs	r2, #58	; 0x3a
 8007cee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	3302      	adds	r3, #2
 8007cf4:	222f      	movs	r2, #47	; 0x2f
 8007cf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3303      	adds	r3, #3
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20000074 	.word	0x20000074

08007d18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d22:	2200      	movs	r2, #0
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff ffaa 	bl	8007c80 <FATFS_LinkDriverEx>
 8007d2c:	4603      	mov	r3, r0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <__libc_init_array>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	4e0d      	ldr	r6, [pc, #52]	; (8007d70 <__libc_init_array+0x38>)
 8007d3c:	4c0d      	ldr	r4, [pc, #52]	; (8007d74 <__libc_init_array+0x3c>)
 8007d3e:	1ba4      	subs	r4, r4, r6
 8007d40:	10a4      	asrs	r4, r4, #2
 8007d42:	2500      	movs	r5, #0
 8007d44:	42a5      	cmp	r5, r4
 8007d46:	d109      	bne.n	8007d5c <__libc_init_array+0x24>
 8007d48:	4e0b      	ldr	r6, [pc, #44]	; (8007d78 <__libc_init_array+0x40>)
 8007d4a:	4c0c      	ldr	r4, [pc, #48]	; (8007d7c <__libc_init_array+0x44>)
 8007d4c:	f000 f820 	bl	8007d90 <_init>
 8007d50:	1ba4      	subs	r4, r4, r6
 8007d52:	10a4      	asrs	r4, r4, #2
 8007d54:	2500      	movs	r5, #0
 8007d56:	42a5      	cmp	r5, r4
 8007d58:	d105      	bne.n	8007d66 <__libc_init_array+0x2e>
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d60:	4798      	blx	r3
 8007d62:	3501      	adds	r5, #1
 8007d64:	e7ee      	b.n	8007d44 <__libc_init_array+0xc>
 8007d66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d6a:	4798      	blx	r3
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	e7f2      	b.n	8007d56 <__libc_init_array+0x1e>
 8007d70:	08007eb8 	.word	0x08007eb8
 8007d74:	08007eb8 	.word	0x08007eb8
 8007d78:	08007eb8 	.word	0x08007eb8
 8007d7c:	08007ebc 	.word	0x08007ebc

08007d80 <memset>:
 8007d80:	4402      	add	r2, r0
 8007d82:	4603      	mov	r3, r0
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d100      	bne.n	8007d8a <memset+0xa>
 8007d88:	4770      	bx	lr
 8007d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8e:	e7f9      	b.n	8007d84 <memset+0x4>

08007d90 <_init>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	bf00      	nop
 8007d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d96:	bc08      	pop	{r3}
 8007d98:	469e      	mov	lr, r3
 8007d9a:	4770      	bx	lr

08007d9c <_fini>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr
